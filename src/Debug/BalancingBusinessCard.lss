
BalancingBusinessCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00000bf0  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800174  00800174  00000d98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a16  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c0  00000000  00000000  00006bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000180e  00000000  00000000  00007392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001060  00000000  00000000  00008ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a35  00000000  00000000  00009c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005174  00000000  00000000  0000b635  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  000107a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ef       	ldi	r30, 0xF0	; 240
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 37       	cpi	r26, 0x78	; 120
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	bd d0       	rcall	.+378    	; 0x1d4 <main>
  5a:	c8 c5       	rjmp	.+2960   	; 0xbec <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z13convertStringPch>:
    default:
      *val = LIS3DH_SPI_4_WIRE;
      break;
  }
  return ret;
}
  5e:	6f 92       	push	r6
  60:	7f 92       	push	r7
  62:	8f 92       	push	r8
  64:	9f 92       	push	r9
  66:	af 92       	push	r10
  68:	bf 92       	push	r11
  6a:	cf 92       	push	r12
  6c:	df 92       	push	r13
  6e:	ef 92       	push	r14
  70:	ff 92       	push	r15
  72:	0f 93       	push	r16
  74:	1f 93       	push	r17
  76:	cf 93       	push	r28
  78:	8c 01       	movw	r16, r24
  7a:	c6 2f       	mov	r28, r22
  7c:	dc 01       	movw	r26, r24
  7e:	0d 90       	ld	r0, X+
  80:	00 20       	and	r0, r0
  82:	e9 f7       	brne	.-6      	; 0x7e <_Z13convertStringPch+0x20>
  84:	cd 01       	movw	r24, r26
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	e6 2e       	mov	r14, r22
  8a:	f1 2c       	mov	r15, r1
  8c:	b5 e0       	ldi	r27, 0x05	; 5
  8e:	eb 0e       	add	r14, r27
  90:	f1 1c       	adc	r15, r1
  92:	80 1b       	sub	r24, r16
  94:	91 0b       	sbc	r25, r17
  96:	b7 01       	movw	r22, r14
  98:	55 d4       	rcall	.+2218   	; 0x944 <__mulhi3>
  9a:	3c 01       	movw	r6, r24
  9c:	86 d4       	rcall	.+2316   	; 0x9aa <malloc>
  9e:	4c 01       	movw	r8, r24
  a0:	ee 0c       	add	r14, r14
  a2:	ff 1c       	adc	r15, r15
  a4:	9c 01       	movw	r18, r24
  a6:	26 5f       	subi	r18, 0xF6	; 246
  a8:	3f 4f       	sbci	r19, 0xFF	; 255
  aa:	bc 01       	movw	r22, r24
  ac:	68 01       	movw	r12, r16
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	0f 2e       	mov	r0, r31
  b4:	f4 e7       	ldi	r31, 0x74	; 116
  b6:	af 2e       	mov	r10, r31
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	bf 2e       	mov	r11, r31
  bc:	f0 2d       	mov	r31, r0
  be:	f8 01       	movw	r30, r16
  c0:	01 90       	ld	r0, Z+
  c2:	00 20       	and	r0, r0
  c4:	e9 f7       	brne	.-6      	; 0xc0 <_Z13convertStringPch+0x62>
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	e0 1b       	sub	r30, r16
  ca:	f1 0b       	sbc	r31, r17
  cc:	4e 17       	cp	r20, r30
  ce:	5f 07       	cpc	r21, r31
  d0:	08 f0       	brcs	.+2      	; 0xd4 <_Z13convertStringPch+0x76>
  d2:	45 c0       	rjmp	.+138    	; 0x15e <_Z13convertStringPch+0x100>
  d4:	d6 01       	movw	r26, r12
  d6:	ed 91       	ld	r30, X+
  d8:	6d 01       	movw	r12, r26
  da:	8e 2f       	mov	r24, r30
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	dc 01       	movw	r26, r24
  e0:	aa 0f       	add	r26, r26
  e2:	bb 1f       	adc	r27, r27
  e4:	aa 0f       	add	r26, r26
  e6:	bb 1f       	adc	r27, r27
  e8:	a8 0f       	add	r26, r24
  ea:	b9 1f       	adc	r27, r25
  ec:	aa 0f       	add	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	aa 59       	subi	r26, 0x9A	; 154
  f2:	bf 4f       	sbci	r27, 0xFF	; 255
  f4:	90 97       	sbiw	r26, 0x20	; 32
  f6:	89 f4       	brne	.+34     	; 0x11a <_Z13convertStringPch+0xbc>
  f8:	05 c0       	rjmp	.+10     	; 0x104 <_Z13convertStringPch+0xa6>
  fa:	cc 23       	and	r28, r28
  fc:	49 f1       	breq	.+82     	; 0x150 <_Z13convertStringPch+0xf2>
  fe:	f9 01       	movw	r30, r18
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	21 c0       	rjmp	.+66     	; 0x146 <_Z13convertStringPch+0xe8>
 104:	ea e6       	ldi	r30, 0x6A	; 106
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	db 01       	movw	r26, r22
 10a:	81 91       	ld	r24, Z+
 10c:	91 91       	ld	r25, Z+
 10e:	8d 93       	st	X+, r24
 110:	9d 93       	st	X+, r25
 112:	ea 15       	cp	r30, r10
 114:	fb 05       	cpc	r31, r11
 116:	c9 f7       	brne	.-14     	; 0x10a <_Z13convertStringPch+0xac>
 118:	f0 cf       	rjmp	.-32     	; 0xfa <_Z13convertStringPch+0x9c>
 11a:	8e 2f       	mov	r24, r30
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	e8 0f       	add	r30, r24
 12a:	f9 1f       	adc	r31, r25
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	e4 52       	subi	r30, 0x24	; 36
 132:	f2 40       	sbci	r31, 0x02	; 2
 134:	db 01       	movw	r26, r22
 136:	81 91       	ld	r24, Z+
 138:	91 91       	ld	r25, Z+
 13a:	8d 93       	st	X+, r24
 13c:	9d 93       	st	X+, r25
 13e:	2a 17       	cp	r18, r26
 140:	3b 07       	cpc	r19, r27
 142:	c9 f7       	brne	.-14     	; 0x136 <_Z13convertStringPch+0xd8>
 144:	da cf       	rjmp	.-76     	; 0xfa <_Z13convertStringPch+0x9c>
 146:	11 92       	st	Z+, r1
 148:	11 92       	st	Z+, r1
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	c8 13       	cpse	r28, r24
 14e:	fb cf       	rjmp	.-10     	; 0x146 <_Z13convertStringPch+0xe8>
 150:	4f 5f       	subi	r20, 0xFF	; 255
 152:	5f 4f       	sbci	r21, 0xFF	; 255
 154:	2e 0d       	add	r18, r14
 156:	3f 1d       	adc	r19, r15
 158:	6e 0d       	add	r22, r14
 15a:	7f 1d       	adc	r23, r15
 15c:	b0 cf       	rjmp	.-160    	; 0xbe <_Z13convertStringPch+0x60>
 15e:	b3 01       	movw	r22, r6
 160:	c4 01       	movw	r24, r8
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	df 90       	pop	r13
 16e:	cf 90       	pop	r12
 170:	bf 90       	pop	r11
 172:	af 90       	pop	r10
 174:	9f 90       	pop	r9
 176:	8f 90       	pop	r8
 178:	7f 90       	pop	r7
 17a:	6f 90       	pop	r6
 17c:	08 95       	ret

0000017e <_Z8ShowLinej>:
#include "alphabet.h"
#include "lis3dh_STdC/driver/lis3dh_reg.h"
#include "lis3dh_STdC/driver/lis3dh_reg.c"

void ShowLine(uint16_t line) {
    PORTA = (line & 0b000011111) << 3; // LED0, LED1, LED2, LED3, LED4
 17e:	28 2f       	mov	r18, r24
 180:	22 0f       	add	r18, r18
 182:	22 0f       	add	r18, r18
 184:	22 0f       	add	r18, r18
 186:	2b bb       	out	0x1b, r18	; 27
    PORTB = ((line & 0b000100000) << 1) ;  // LED5
 188:	28 2f       	mov	r18, r24
 18a:	20 72       	andi	r18, 0x20	; 32
 18c:	22 0f       	add	r18, r18
 18e:	28 bb       	out	0x18, r18	; 24
	PORTB |= ((line & 0b001000000) >> 1);  // LED6
 190:	48 b3       	in	r20, 0x18	; 24
 192:	9c 01       	movw	r18, r24
 194:	20 74       	andi	r18, 0x40	; 64
 196:	33 27       	eor	r19, r19
 198:	36 95       	lsr	r19
 19a:	27 95       	ror	r18
 19c:	24 2b       	or	r18, r20
 19e:	28 bb       	out	0x18, r18	; 24
	PORTB |= ((line & 0b010000000) >> 3);  // LED7
 1a0:	48 b3       	in	r20, 0x18	; 24
 1a2:	9c 01       	movw	r18, r24
 1a4:	20 78       	andi	r18, 0x80	; 128
 1a6:	33 27       	eor	r19, r19
 1a8:	36 95       	lsr	r19
 1aa:	27 95       	ror	r18
 1ac:	36 95       	lsr	r19
 1ae:	27 95       	ror	r18
 1b0:	36 95       	lsr	r19
 1b2:	27 95       	ror	r18
 1b4:	24 2b       	or	r18, r20
 1b6:	28 bb       	out	0x18, r18	; 24
	PORTB |= ((line & 0b100000000) >> 5);  // LED8
 1b8:	28 b3       	in	r18, 0x18	; 24
 1ba:	88 27       	eor	r24, r24
 1bc:	91 70       	andi	r25, 0x01	; 1
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	92 95       	swap	r25
 1c4:	82 95       	swap	r24
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	89 27       	eor	r24, r25
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	89 27       	eor	r24, r25
 1ce:	82 2b       	or	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret

000001d4 <main>:
}

int main()
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	a5 97       	sbiw	r28, 0x25	; 37
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
	// Configuring ATTiny
	DDRA=0xff;                            // Configure PORTA as output
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	8a bb       	out	0x1a, r24	; 26
	CLKPR = 1<<CLKPCE;
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	88 bd       	out	0x28, r24	; 40
	CLKPR = 1<<CLKPS1;                    // Set clock division to 4
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	88 bd       	out	0x28, r24	; 40
	
	TCCR0B = 1<<CS02;                     // Divide clock by 256
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	83 bf       	out	0x33, r24	; 51

	DDRB = 0b01111010;                    // Set LEDs on port B as output
 1f8:	8a e7       	ldi	r24, 0x7A	; 122
 1fa:	87 bb       	out	0x17, r24	; 23
	DDRA = 0b11111000;                    // Set LEDs on port A as output
 1fc:	88 ef       	ldi	r24, 0xF8	; 248
 1fe:	8a bb       	out	0x1a, r24	; 26

	// Parameters
	char message[] = "MAX";	              // Message to display
 200:	8d e4       	ldi	r24, 0x4D	; 77
 202:	91 e4       	ldi	r25, 0x41	; 65
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	88 e5       	ldi	r24, 0x58	; 88
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	9c 83       	std	Y+4, r25	; 0x04
 20e:	8b 83       	std	Y+3, r24	; 0x03
	bool countStarted = false;		      // State of switch counter, 1 if started and 0 if not
	uint32_t switchPreviousTime = 0;      // Time of triggering switch
	
	
	// Generate Flash Pattern
	struct FlashPattern flashPattern = convertString(message, kerning);
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	23 df       	rcall	.-442    	; 0x5e <_Z13convertStringPch>
 218:	6e 8f       	std	Y+30, r22	; 0x1e
 21a:	7f 8f       	std	Y+31, r23	; 0x1f
 21c:	88 a3       	std	Y+32, r24	; 0x20
 21e:	99 a3       	std	Y+33, r25	; 0x21
 220:	ce 8c       	ldd	r12, Y+30	; 0x1e
 222:	df 8c       	ldd	r13, Y+31	; 0x1f
 224:	dd 8e       	std	Y+29, r13	; 0x1d
 226:	cc 8e       	std	Y+28, r12	; 0x1c
	int messageIndex = 0;			      // Index of displayed message
	
	bool messageStarted = false;		  // State of message display. Starts on a change of state
	bool switchState = true;              // State of debounced tilt switch, either 0 or 1
	bool countStarted = false;		      // State of switch counter, 1 if started and 0 if not
	uint32_t switchPreviousTime = 0;      // Time of triggering switch
 228:	1c 8a       	std	Y+20, r1	; 0x14
 22a:	1d 8a       	std	Y+21, r1	; 0x15
 22c:	1e 8a       	std	Y+22, r1	; 0x16
 22e:	1f 8a       	std	Y+23, r1	; 0x17
	long double swingTime = 2000;         // Initial guess for time to swing back and forth
	int messageIndex = 0;			      // Index of displayed message
	
	bool messageStarted = false;		  // State of message display. Starts on a change of state
	bool switchState = true;              // State of debounced tilt switch, either 0 or 1
	bool countStarted = false;		      // State of switch counter, 1 if started and 0 if not
 230:	31 2c       	mov	r3, r1
	// uint32_t previousTime = 0;            // Used for debugging. TODO: Remove
	long double swingTime = 2000;         // Initial guess for time to swing back and forth
	int messageIndex = 0;			      // Index of displayed message
	
	bool messageStarted = false;		  // State of message display. Starts on a change of state
	bool switchState = true;              // State of debounced tilt switch, either 0 or 1
 232:	11 e0       	ldi	r17, 0x01	; 1
	uint32_t lastSwitchedTime = 0;	      // Time that the switch last changed
	// uint32_t previousTime = 0;            // Used for debugging. TODO: Remove
	long double swingTime = 2000;         // Initial guess for time to swing back and forth
	int messageIndex = 0;			      // Index of displayed message
	
	bool messageStarted = false;		  // State of message display. Starts on a change of state
 234:	40 e0       	ldi	r20, 0x00	; 0
	// Variable Initializations
	uint32_t timerOverflowCount = 0;      // Each tick is 0.032768s
	uint32_t totalTime = 0;               // Each tick of totalTime is 0.000128s
	uint32_t lastSwitchedTime = 0;	      // Time that the switch last changed
	// uint32_t previousTime = 0;            // Used for debugging. TODO: Remove
	long double swingTime = 2000;         // Initial guess for time to swing back and forth
 236:	1d 82       	std	Y+5, r1	; 0x05
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	0f 2e       	mov	r0, r31
 23c:	fa ef       	ldi	r31, 0xFA	; 250
 23e:	2f 2e       	mov	r2, r31
 240:	f0 2d       	mov	r31, r0
 242:	24 e4       	ldi	r18, 0x44	; 68
 244:	29 87       	std	Y+9, r18	; 0x09
	

	// Variable Initializations
	uint32_t timerOverflowCount = 0;      // Each tick is 0.032768s
	uint32_t totalTime = 0;               // Each tick of totalTime is 0.000128s
	uint32_t lastSwitchedTime = 0;	      // Time that the switch last changed
 246:	81 2c       	mov	r8, r1
 248:	91 2c       	mov	r9, r1
 24a:	54 01       	movw	r10, r8
	uint32_t switchDebounceTime = 200;    // Time switch must debounce 
	uint8_t swingTimeTrailingAvgLen = 5;  // Trailing average number for swing time
	

	// Variable Initializations
	uint32_t timerOverflowCount = 0;      // Each tick is 0.032768s
 24c:	41 2c       	mov	r4, r1
 24e:	51 2c       	mov	r5, r1
 250:	32 01       	movw	r6, r4
	

	while(1)
	{ 
		// Calculate how many ticks each line should last
		timeToWait = swingTime / (2 * buffer + flashPattern.length);
 252:	c6 01       	movw	r24, r12
 254:	88 96       	adiw	r24, 0x28	; 40
 256:	6c 01       	movw	r12, r24
 258:	99 0f       	add	r25, r25
 25a:	ee 08       	sbc	r14, r14
 25c:	ff 08       	sbc	r15, r15
 25e:	c8 8e       	std	Y+24, r12	; 0x18
 260:	d9 8e       	std	Y+25, r13	; 0x19
 262:	ea 8e       	std	Y+26, r14	; 0x1a
 264:	fb 8e       	std	Y+27, r15	; 0x1b
		{
			if((totalTime - lastSwitchedTime) > (buffer * timeToWait))
			{
				if(switchState){
					// Get index of message using the time.
					messageIndex = flashPattern.length - floor((totalTime - lastSwitchedTime - buffer * timeToWait) / timeToWait);
 266:	cc 8c       	ldd	r12, Y+28	; 0x1c
 268:	dd 8c       	ldd	r13, Y+29	; 0x1d
 26a:	0d 2c       	mov	r0, r13
 26c:	00 0c       	add	r0, r0
 26e:	ee 08       	sbc	r14, r14
 270:	ff 08       	sbc	r15, r15
 272:	ca a2       	std	Y+34, r12	; 0x22
 274:	db a2       	std	Y+35, r13	; 0x23
 276:	ec a2       	std	Y+36, r14	; 0x24
 278:	fd a2       	std	Y+37, r15	; 0x25
 27a:	64 2f       	mov	r22, r20
 27c:	0f c0       	rjmp	.+30     	; 0x29c <__stack+0x3d>
 27e:	dd 84       	ldd	r13, Y+13	; 0x0d
 280:	dd 82       	std	Y+5, r13	; 0x05
 282:	09 89       	ldd	r16, Y+17	; 0x11
 284:	2a 88       	ldd	r2, Y+18	; 0x12
 286:	eb 88       	ldd	r14, Y+19	; 0x13
 288:	e9 86       	std	Y+9, r14	; 0x09
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	07 c0       	rjmp	.+14     	; 0x29c <__stack+0x3d>
 28e:	fd 84       	ldd	r15, Y+13	; 0x0d
 290:	fd 82       	std	Y+5, r15	; 0x05
 292:	09 89       	ldd	r16, Y+17	; 0x11
 294:	2a 88       	ldd	r2, Y+18	; 0x12
 296:	cb 88       	ldd	r12, Y+19	; 0x13
 298:	c9 86       	std	Y+9, r12	; 0x09
				{
					ShowLine(flashPattern.data[messageIndex]);
				}
				else // Message display finished
				{
					messageStarted = false;
 29a:	60 e0       	ldi	r22, 0x00	; 0
		// Calculate how many ticks each line should last
		timeToWait = swingTime / (2 * buffer + flashPattern.length);
				
		
		// Record total time since start 
		if ((TIFR & (1<<TOV0)) == (1<<TOV0)) // check if overflow flag is set
 29c:	08 b6       	in	r0, 0x38	; 56
 29e:	01 fe       	sbrs	r0, 1
 2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <__stack+0x55>
		{
			TIFR =  1<<TOV0;; //clear timer1 overflow flag
 2a2:	68 94       	set
 2a4:	dd 24       	eor	r13, r13
 2a6:	d1 f8       	bld	r13, 1
 2a8:	d8 be       	out	0x38, r13	; 56
			timerOverflowCount++;
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	42 1a       	sub	r4, r18
 2ae:	52 0a       	sbc	r5, r18
 2b0:	62 0a       	sbc	r6, r18
 2b2:	72 0a       	sbc	r7, r18
		}
		totalTime = TCNT0L + 256 * timerOverflowCount; // total time since start of uC
 2b4:	22 b7       	in	r18, 0x32	; 50
 2b6:	b6 2d       	mov	r27, r6
 2b8:	a5 2d       	mov	r26, r5
 2ba:	94 2d       	mov	r25, r4
 2bc:	88 27       	eor	r24, r24
 2be:	6c 01       	movw	r12, r24
 2c0:	7d 01       	movw	r14, r26
 2c2:	c2 0e       	add	r12, r18
 2c4:	d1 1c       	adc	r13, r1
 2c6:	e1 1c       	adc	r14, r1
 2c8:	f1 1c       	adc	r15, r1
		
		
		// Debounce tilt switch
		if (((PINA & (1<<PINA1)) != (switchState<<PINA1)) ) // Switch triggered
 2ca:	89 b3       	in	r24, 0x19	; 25
 2cc:	82 70       	andi	r24, 0x02	; 2
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	21 2f       	mov	r18, r17
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	82 17       	cp	r24, r18
 2da:	93 07       	cpc	r25, r19
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <__stack+0x81>
 2de:	41 c0       	rjmp	.+130    	; 0x362 <__stack+0x103>
		{
			// PORTA = PORTA | (1<<PA3);
			if(countStarted == false)  // If counter hasn't started yet
 2e0:	33 20       	and	r3, r3
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <__stack+0x87>
 2e4:	40 c0       	rjmp	.+128    	; 0x366 <__stack+0x107>
				countStarted = true;               // Start counter
				switchPreviousTime = totalTime;    // Set counter start time
			}
			else               // If the counter has started
			{
				if ((totalTime - switchPreviousTime ) > switchDebounceTime) 
 2e6:	d7 01       	movw	r26, r14
 2e8:	c6 01       	movw	r24, r12
 2ea:	2c 89       	ldd	r18, Y+20	; 0x14
 2ec:	3d 89       	ldd	r19, Y+21	; 0x15
 2ee:	4e 89       	ldd	r20, Y+22	; 0x16
 2f0:	5f 89       	ldd	r21, Y+23	; 0x17
 2f2:	82 1b       	sub	r24, r18
 2f4:	93 0b       	sbc	r25, r19
 2f6:	a4 0b       	sbc	r26, r20
 2f8:	b5 0b       	sbc	r27, r21
 2fa:	89 3c       	cpi	r24, 0xC9	; 201
 2fc:	91 05       	cpc	r25, r1
 2fe:	a1 05       	cpc	r26, r1
 300:	b1 05       	cpc	r27, r1
 302:	b8 f1       	brcs	.+110    	; 0x372 <__stack+0x113>
				{
					// On change of state, update trailing average
					swingTime = swingTime * (swingTimeTrailingAvgLen - 1)/swingTimeTrailingAvgLen +
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	40 e8       	ldi	r20, 0x80	; 128
 30a:	50 e4       	ldi	r21, 0x40	; 64
 30c:	6d 81       	ldd	r22, Y+5	; 0x05
 30e:	70 2f       	mov	r23, r16
 310:	82 2d       	mov	r24, r2
 312:	99 85       	ldd	r25, Y+9	; 0x09
 314:	88 d2       	rcall	.+1296   	; 0x826 <__mulsf3>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 ea       	ldi	r20, 0xA0	; 160
 31c:	50 e4       	ldi	r21, 0x40	; 64
 31e:	05 d1       	rcall	.+522    	; 0x52a <__divsf3>
 320:	6d 87       	std	Y+13, r22	; 0x0d
 322:	7e 87       	std	Y+14, r23	; 0x0e
 324:	8f 87       	std	Y+15, r24	; 0x0f
 326:	98 8b       	std	Y+16, r25	; 0x10
								(totalTime - lastSwitchedTime) / swingTimeTrailingAvgLen;
 328:	c7 01       	movw	r24, r14
 32a:	b6 01       	movw	r22, r12
 32c:	68 19       	sub	r22, r8
 32e:	79 09       	sbc	r23, r9
 330:	8a 09       	sbc	r24, r10
 332:	9b 09       	sbc	r25, r11
 334:	25 e0       	ldi	r18, 0x05	; 5
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	14 d3       	rcall	.+1576   	; 0x966 <__udivmodsi4>
 33e:	ca 01       	movw	r24, r20
 340:	b9 01       	movw	r22, r18
 342:	8c d1       	rcall	.+792    	; 0x65c <__floatunsisf>
 344:	2d 85       	ldd	r18, Y+13	; 0x0d
 346:	3e 85       	ldd	r19, Y+14	; 0x0e
 348:	4f 85       	ldd	r20, Y+15	; 0x0f
 34a:	58 89       	ldd	r21, Y+16	; 0x10
 34c:	8a d0       	rcall	.+276    	; 0x462 <__addsf3>
 34e:	6d 87       	std	Y+13, r22	; 0x0d
 350:	79 8b       	std	Y+17, r23	; 0x11
 352:	8a 8b       	std	Y+18, r24	; 0x12
 354:	9b 8b       	std	Y+19, r25	; 0x13
					
					lastSwitchedTime = totalTime;
					switchState = !switchState;
 356:	31 e0       	ldi	r19, 0x01	; 1
 358:	13 27       	eor	r17, r19
				{
					// On change of state, update trailing average
					swingTime = swingTime * (swingTimeTrailingAvgLen - 1)/swingTimeTrailingAvgLen +
								(totalTime - lastSwitchedTime) / swingTimeTrailingAvgLen;
					
					lastSwitchedTime = totalTime;
 35a:	46 01       	movw	r8, r12
 35c:	57 01       	movw	r10, r14
					switchState = !switchState;
					countStarted = false;			// End the counter
 35e:	31 2c       	mov	r3, r1
 360:	11 c0       	rjmp	.+34     	; 0x384 <__stack+0x125>
				}
			}
		}
		else                                    // If switch is not triggered
		{
			countStarted = false;                   // End the counter
 362:	31 2c       	mov	r3, r1
 364:	06 c0       	rjmp	.+12     	; 0x372 <__stack+0x113>
		{
			// PORTA = PORTA | (1<<PA3);
			if(countStarted == false)  // If counter hasn't started yet
			{
				countStarted = true;               // Start counter
				switchPreviousTime = totalTime;    // Set counter start time
 366:	cc 8a       	std	Y+20, r12	; 0x14
 368:	dd 8a       	std	Y+21, r13	; 0x15
 36a:	ee 8a       	std	Y+22, r14	; 0x16
 36c:	ff 8a       	std	Y+23, r15	; 0x17
		if (((PINA & (1<<PINA1)) != (switchState<<PINA1)) ) // Switch triggered
		{
			// PORTA = PORTA | (1<<PA3);
			if(countStarted == false)  // If counter hasn't started yet
			{
				countStarted = true;               // Start counter
 36e:	33 24       	eor	r3, r3
 370:	33 94       	inc	r3
		{
			countStarted = false;                   // End the counter
		}
		
		
		if(messageStarted)
 372:	66 23       	and	r22, r22
 374:	09 f4       	brne	.+2      	; 0x378 <__stack+0x119>
 376:	92 cf       	rjmp	.-220    	; 0x29c <__stack+0x3d>
 378:	4d 81       	ldd	r20, Y+5	; 0x05
 37a:	4d 87       	std	Y+13, r20	; 0x0d
 37c:	09 8b       	std	Y+17, r16	; 0x11
 37e:	2a 8a       	std	Y+18, r2	; 0x12
 380:	59 85       	ldd	r21, Y+9	; 0x09
 382:	5b 8b       	std	Y+19, r21	; 0x13
	

	while(1)
	{ 
		// Calculate how many ticks each line should last
		timeToWait = swingTime / (2 * buffer + flashPattern.length);
 384:	68 8d       	ldd	r22, Y+24	; 0x18
 386:	79 8d       	ldd	r23, Y+25	; 0x19
 388:	8a 8d       	ldd	r24, Y+26	; 0x1a
 38a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 38c:	69 d1       	rcall	.+722    	; 0x660 <__floatsisf>
 38e:	9b 01       	movw	r18, r22
 390:	ac 01       	movw	r20, r24
 392:	6d 81       	ldd	r22, Y+5	; 0x05
 394:	70 2f       	mov	r23, r16
 396:	82 2d       	mov	r24, r2
 398:	99 85       	ldd	r25, Y+9	; 0x09
 39a:	c7 d0       	rcall	.+398    	; 0x52a <__divsf3>
 39c:	6d 83       	std	Y+5, r22	; 0x05
 39e:	7e 83       	std	Y+6, r23	; 0x06
 3a0:	8f 83       	std	Y+7, r24	; 0x07
 3a2:	98 87       	std	Y+8, r25	; 0x08
		}
		
		
		if(messageStarted)
		{
			if((totalTime - lastSwitchedTime) > (buffer * timeToWait))
 3a4:	c7 01       	movw	r24, r14
 3a6:	b6 01       	movw	r22, r12
 3a8:	68 19       	sub	r22, r8
 3aa:	79 09       	sbc	r23, r9
 3ac:	8a 09       	sbc	r24, r10
 3ae:	9b 09       	sbc	r25, r11
 3b0:	55 d1       	rcall	.+682    	; 0x65c <__floatunsisf>
 3b2:	6b 01       	movw	r12, r22
 3b4:	7c 01       	movw	r14, r24
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	40 ea       	ldi	r20, 0xA0	; 160
 3bc:	51 e4       	ldi	r21, 0x41	; 65
 3be:	6d 81       	ldd	r22, Y+5	; 0x05
 3c0:	7e 81       	ldd	r23, Y+6	; 0x06
 3c2:	8f 81       	ldd	r24, Y+7	; 0x07
 3c4:	98 85       	ldd	r25, Y+8	; 0x08
 3c6:	2f d2       	rcall	.+1118   	; 0x826 <__mulsf3>
 3c8:	69 87       	std	Y+9, r22	; 0x09
 3ca:	7a 87       	std	Y+10, r23	; 0x0a
 3cc:	8b 87       	std	Y+11, r24	; 0x0b
 3ce:	9c 87       	std	Y+12, r25	; 0x0c
 3d0:	9b 01       	movw	r18, r22
 3d2:	ac 01       	movw	r20, r24
 3d4:	c7 01       	movw	r24, r14
 3d6:	b6 01       	movw	r22, r12
 3d8:	22 d2       	rcall	.+1092   	; 0x81e <__gesf2>
 3da:	18 16       	cp	r1, r24
 3dc:	0c f0       	brlt	.+2      	; 0x3e0 <__stack+0x181>
 3de:	4f cf       	rjmp	.-354    	; 0x27e <__stack+0x1f>
			{
				if(switchState){
 3e0:	11 23       	and	r17, r17
 3e2:	c9 f0       	breq	.+50     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
					// Get index of message using the time.
					messageIndex = flashPattern.length - floor((totalTime - lastSwitchedTime - buffer * timeToWait) / timeToWait);
 3e4:	29 85       	ldd	r18, Y+9	; 0x09
 3e6:	3a 85       	ldd	r19, Y+10	; 0x0a
 3e8:	4b 85       	ldd	r20, Y+11	; 0x0b
 3ea:	5c 85       	ldd	r21, Y+12	; 0x0c
 3ec:	c7 01       	movw	r24, r14
 3ee:	b6 01       	movw	r22, r12
 3f0:	37 d0       	rcall	.+110    	; 0x460 <__subsf3>
 3f2:	2d 81       	ldd	r18, Y+5	; 0x05
 3f4:	3e 81       	ldd	r19, Y+6	; 0x06
 3f6:	4f 81       	ldd	r20, Y+7	; 0x07
 3f8:	58 85       	ldd	r21, Y+8	; 0x08
 3fa:	97 d0       	rcall	.+302    	; 0x52a <__divsf3>
 3fc:	6c d1       	rcall	.+728    	; 0x6d6 <floor>
 3fe:	6b 01       	movw	r12, r22
 400:	7c 01       	movw	r14, r24
 402:	6a a1       	ldd	r22, Y+34	; 0x22
 404:	7b a1       	ldd	r23, Y+35	; 0x23
 406:	8c a1       	ldd	r24, Y+36	; 0x24
 408:	9d a1       	ldd	r25, Y+37	; 0x25
 40a:	2a d1       	rcall	.+596    	; 0x660 <__floatsisf>
 40c:	a7 01       	movw	r20, r14
 40e:	96 01       	movw	r18, r12
 410:	27 d0       	rcall	.+78     	; 0x460 <__subsf3>
 412:	f3 d0       	rcall	.+486    	; 0x5fa <__fixsfsi>
 414:	0e c0       	rjmp	.+28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				}
				else
				{
					// Get index of message using the time.
					messageIndex = floor((totalTime - lastSwitchedTime - buffer * timeToWait) / timeToWait);
 416:	29 85       	ldd	r18, Y+9	; 0x09
 418:	3a 85       	ldd	r19, Y+10	; 0x0a
 41a:	4b 85       	ldd	r20, Y+11	; 0x0b
 41c:	5c 85       	ldd	r21, Y+12	; 0x0c
 41e:	c7 01       	movw	r24, r14
 420:	b6 01       	movw	r22, r12
 422:	1e d0       	rcall	.+60     	; 0x460 <__subsf3>
 424:	2d 81       	ldd	r18, Y+5	; 0x05
 426:	3e 81       	ldd	r19, Y+6	; 0x06
 428:	4f 81       	ldd	r20, Y+7	; 0x07
 42a:	58 85       	ldd	r21, Y+8	; 0x08
 42c:	7e d0       	rcall	.+252    	; 0x52a <__divsf3>
 42e:	53 d1       	rcall	.+678    	; 0x6d6 <floor>
 430:	e4 d0       	rcall	.+456    	; 0x5fa <__fixsfsi>
					
				}
				if(messageIndex < flashPattern.length)
 432:	cc 8c       	ldd	r12, Y+28	; 0x1c
 434:	dd 8c       	ldd	r13, Y+29	; 0x1d
 436:	6c 15       	cp	r22, r12
 438:	7d 05       	cpc	r23, r13
 43a:	0c f0       	brlt	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	28 cf       	rjmp	.-432    	; 0x28e <__stack+0x2f>
				{
					ShowLine(flashPattern.data[messageIndex]);
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	e8 a1       	ldd	r30, Y+32	; 0x20
 444:	f9 a1       	ldd	r31, Y+33	; 0x21
 446:	e6 0f       	add	r30, r22
 448:	f7 1f       	adc	r31, r23
 44a:	80 81       	ld	r24, Z
 44c:	91 81       	ldd	r25, Z+1	; 0x01
 44e:	97 de       	rcall	.-722    	; 0x17e <_Z8ShowLinej>
 450:	dd 84       	ldd	r13, Y+13	; 0x0d
 452:	dd 82       	std	Y+5, r13	; 0x05
 454:	09 89       	ldd	r16, Y+17	; 0x11
 456:	2a 88       	ldd	r2, Y+18	; 0x12
 458:	eb 88       	ldd	r14, Y+19	; 0x13
 45a:	e9 86       	std	Y+9, r14	; 0x09
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	1e cf       	rjmp	.-452    	; 0x29c <__stack+0x3d>

00000460 <__subsf3>:
 460:	50 58       	subi	r21, 0x80	; 128

00000462 <__addsf3>:
 462:	bb 27       	eor	r27, r27
 464:	aa 27       	eor	r26, r26
 466:	0e d0       	rcall	.+28     	; 0x484 <__addsf3x>
 468:	89 c1       	rjmp	.+786    	; 0x77c <__fp_round>
 46a:	7a d1       	rcall	.+756    	; 0x760 <__fp_pscA>
 46c:	30 f0       	brcs	.+12     	; 0x47a <__addsf3+0x18>
 46e:	7f d1       	rcall	.+766    	; 0x76e <__fp_pscB>
 470:	20 f0       	brcs	.+8      	; 0x47a <__addsf3+0x18>
 472:	31 f4       	brne	.+12     	; 0x480 <__addsf3+0x1e>
 474:	9f 3f       	cpi	r25, 0xFF	; 255
 476:	11 f4       	brne	.+4      	; 0x47c <__addsf3+0x1a>
 478:	1e f4       	brtc	.+6      	; 0x480 <__addsf3+0x1e>
 47a:	6f c1       	rjmp	.+734    	; 0x75a <__fp_nan>
 47c:	0e f4       	brtc	.+2      	; 0x480 <__addsf3+0x1e>
 47e:	e0 95       	com	r30
 480:	e7 fb       	bst	r30, 7
 482:	3c c1       	rjmp	.+632    	; 0x6fc <__fp_inf>

00000484 <__addsf3x>:
 484:	e9 2f       	mov	r30, r25
 486:	8b d1       	rcall	.+790    	; 0x79e <__fp_split3>
 488:	80 f3       	brcs	.-32     	; 0x46a <__addsf3+0x8>
 48a:	ba 17       	cp	r27, r26
 48c:	62 07       	cpc	r22, r18
 48e:	73 07       	cpc	r23, r19
 490:	84 07       	cpc	r24, r20
 492:	95 07       	cpc	r25, r21
 494:	18 f0       	brcs	.+6      	; 0x49c <__addsf3x+0x18>
 496:	71 f4       	brne	.+28     	; 0x4b4 <__addsf3x+0x30>
 498:	9e f5       	brtc	.+102    	; 0x500 <__addsf3x+0x7c>
 49a:	ba c1       	rjmp	.+884    	; 0x810 <__fp_zero>
 49c:	0e f4       	brtc	.+2      	; 0x4a0 <__addsf3x+0x1c>
 49e:	e0 95       	com	r30
 4a0:	0b 2e       	mov	r0, r27
 4a2:	ba 2f       	mov	r27, r26
 4a4:	a0 2d       	mov	r26, r0
 4a6:	0b 01       	movw	r0, r22
 4a8:	b9 01       	movw	r22, r18
 4aa:	90 01       	movw	r18, r0
 4ac:	0c 01       	movw	r0, r24
 4ae:	ca 01       	movw	r24, r20
 4b0:	a0 01       	movw	r20, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	ff 27       	eor	r31, r31
 4b6:	59 1b       	sub	r21, r25
 4b8:	99 f0       	breq	.+38     	; 0x4e0 <__addsf3x+0x5c>
 4ba:	59 3f       	cpi	r21, 0xF9	; 249
 4bc:	50 f4       	brcc	.+20     	; 0x4d2 <__addsf3x+0x4e>
 4be:	50 3e       	cpi	r21, 0xE0	; 224
 4c0:	68 f1       	brcs	.+90     	; 0x51c <__addsf3x+0x98>
 4c2:	1a 16       	cp	r1, r26
 4c4:	f0 40       	sbci	r31, 0x00	; 0
 4c6:	a2 2f       	mov	r26, r18
 4c8:	23 2f       	mov	r18, r19
 4ca:	34 2f       	mov	r19, r20
 4cc:	44 27       	eor	r20, r20
 4ce:	58 5f       	subi	r21, 0xF8	; 248
 4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <__addsf3x+0x34>
 4d2:	46 95       	lsr	r20
 4d4:	37 95       	ror	r19
 4d6:	27 95       	ror	r18
 4d8:	a7 95       	ror	r26
 4da:	f0 40       	sbci	r31, 0x00	; 0
 4dc:	53 95       	inc	r21
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__addsf3x+0x4e>
 4e0:	7e f4       	brtc	.+30     	; 0x500 <__addsf3x+0x7c>
 4e2:	1f 16       	cp	r1, r31
 4e4:	ba 0b       	sbc	r27, r26
 4e6:	62 0b       	sbc	r22, r18
 4e8:	73 0b       	sbc	r23, r19
 4ea:	84 0b       	sbc	r24, r20
 4ec:	ba f0       	brmi	.+46     	; 0x51c <__addsf3x+0x98>
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	a1 f0       	breq	.+40     	; 0x51a <__addsf3x+0x96>
 4f2:	ff 0f       	add	r31, r31
 4f4:	bb 1f       	adc	r27, r27
 4f6:	66 1f       	adc	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	c2 f7       	brpl	.-16     	; 0x4ee <__addsf3x+0x6a>
 4fe:	0e c0       	rjmp	.+28     	; 0x51c <__addsf3x+0x98>
 500:	ba 0f       	add	r27, r26
 502:	62 1f       	adc	r22, r18
 504:	73 1f       	adc	r23, r19
 506:	84 1f       	adc	r24, r20
 508:	48 f4       	brcc	.+18     	; 0x51c <__addsf3x+0x98>
 50a:	87 95       	ror	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b7 95       	ror	r27
 512:	f7 95       	ror	r31
 514:	9e 3f       	cpi	r25, 0xFE	; 254
 516:	08 f0       	brcs	.+2      	; 0x51a <__addsf3x+0x96>
 518:	b3 cf       	rjmp	.-154    	; 0x480 <__addsf3+0x1e>
 51a:	93 95       	inc	r25
 51c:	88 0f       	add	r24, r24
 51e:	08 f0       	brcs	.+2      	; 0x522 <__addsf3x+0x9e>
 520:	99 27       	eor	r25, r25
 522:	ee 0f       	add	r30, r30
 524:	97 95       	ror	r25
 526:	87 95       	ror	r24
 528:	08 95       	ret

0000052a <__divsf3>:
 52a:	0c d0       	rcall	.+24     	; 0x544 <__divsf3x>
 52c:	27 c1       	rjmp	.+590    	; 0x77c <__fp_round>
 52e:	1f d1       	rcall	.+574    	; 0x76e <__fp_pscB>
 530:	40 f0       	brcs	.+16     	; 0x542 <__divsf3+0x18>
 532:	16 d1       	rcall	.+556    	; 0x760 <__fp_pscA>
 534:	30 f0       	brcs	.+12     	; 0x542 <__divsf3+0x18>
 536:	21 f4       	brne	.+8      	; 0x540 <__divsf3+0x16>
 538:	5f 3f       	cpi	r21, 0xFF	; 255
 53a:	19 f0       	breq	.+6      	; 0x542 <__divsf3+0x18>
 53c:	df c0       	rjmp	.+446    	; 0x6fc <__fp_inf>
 53e:	51 11       	cpse	r21, r1
 540:	68 c1       	rjmp	.+720    	; 0x812 <__fp_szero>
 542:	0b c1       	rjmp	.+534    	; 0x75a <__fp_nan>

00000544 <__divsf3x>:
 544:	2c d1       	rcall	.+600    	; 0x79e <__fp_split3>
 546:	98 f3       	brcs	.-26     	; 0x52e <__divsf3+0x4>

00000548 <__divsf3_pse>:
 548:	99 23       	and	r25, r25
 54a:	c9 f3       	breq	.-14     	; 0x53e <__divsf3+0x14>
 54c:	55 23       	and	r21, r21
 54e:	b1 f3       	breq	.-20     	; 0x53c <__divsf3+0x12>
 550:	95 1b       	sub	r25, r21
 552:	55 0b       	sbc	r21, r21
 554:	bb 27       	eor	r27, r27
 556:	aa 27       	eor	r26, r26
 558:	62 17       	cp	r22, r18
 55a:	73 07       	cpc	r23, r19
 55c:	84 07       	cpc	r24, r20
 55e:	38 f0       	brcs	.+14     	; 0x56e <__divsf3_pse+0x26>
 560:	9f 5f       	subi	r25, 0xFF	; 255
 562:	5f 4f       	sbci	r21, 0xFF	; 255
 564:	22 0f       	add	r18, r18
 566:	33 1f       	adc	r19, r19
 568:	44 1f       	adc	r20, r20
 56a:	aa 1f       	adc	r26, r26
 56c:	a9 f3       	breq	.-22     	; 0x558 <__divsf3_pse+0x10>
 56e:	33 d0       	rcall	.+102    	; 0x5d6 <__divsf3_pse+0x8e>
 570:	0e 2e       	mov	r0, r30
 572:	3a f0       	brmi	.+14     	; 0x582 <__divsf3_pse+0x3a>
 574:	e0 e8       	ldi	r30, 0x80	; 128
 576:	30 d0       	rcall	.+96     	; 0x5d8 <__divsf3_pse+0x90>
 578:	91 50       	subi	r25, 0x01	; 1
 57a:	50 40       	sbci	r21, 0x00	; 0
 57c:	e6 95       	lsr	r30
 57e:	00 1c       	adc	r0, r0
 580:	ca f7       	brpl	.-14     	; 0x574 <__divsf3_pse+0x2c>
 582:	29 d0       	rcall	.+82     	; 0x5d6 <__divsf3_pse+0x8e>
 584:	fe 2f       	mov	r31, r30
 586:	27 d0       	rcall	.+78     	; 0x5d6 <__divsf3_pse+0x8e>
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	bb 1f       	adc	r27, r27
 590:	26 17       	cp	r18, r22
 592:	37 07       	cpc	r19, r23
 594:	48 07       	cpc	r20, r24
 596:	ab 07       	cpc	r26, r27
 598:	b0 e8       	ldi	r27, 0x80	; 128
 59a:	09 f0       	breq	.+2      	; 0x59e <__divsf3_pse+0x56>
 59c:	bb 0b       	sbc	r27, r27
 59e:	80 2d       	mov	r24, r0
 5a0:	bf 01       	movw	r22, r30
 5a2:	ff 27       	eor	r31, r31
 5a4:	93 58       	subi	r25, 0x83	; 131
 5a6:	5f 4f       	sbci	r21, 0xFF	; 255
 5a8:	2a f0       	brmi	.+10     	; 0x5b4 <__divsf3_pse+0x6c>
 5aa:	9e 3f       	cpi	r25, 0xFE	; 254
 5ac:	51 05       	cpc	r21, r1
 5ae:	68 f0       	brcs	.+26     	; 0x5ca <__divsf3_pse+0x82>
 5b0:	a5 c0       	rjmp	.+330    	; 0x6fc <__fp_inf>
 5b2:	2f c1       	rjmp	.+606    	; 0x812 <__fp_szero>
 5b4:	5f 3f       	cpi	r21, 0xFF	; 255
 5b6:	ec f3       	brlt	.-6      	; 0x5b2 <__divsf3_pse+0x6a>
 5b8:	98 3e       	cpi	r25, 0xE8	; 232
 5ba:	dc f3       	brlt	.-10     	; 0x5b2 <__divsf3_pse+0x6a>
 5bc:	86 95       	lsr	r24
 5be:	77 95       	ror	r23
 5c0:	67 95       	ror	r22
 5c2:	b7 95       	ror	r27
 5c4:	f7 95       	ror	r31
 5c6:	9f 5f       	subi	r25, 0xFF	; 255
 5c8:	c9 f7       	brne	.-14     	; 0x5bc <__divsf3_pse+0x74>
 5ca:	88 0f       	add	r24, r24
 5cc:	91 1d       	adc	r25, r1
 5ce:	96 95       	lsr	r25
 5d0:	87 95       	ror	r24
 5d2:	97 f9       	bld	r25, 7
 5d4:	08 95       	ret
 5d6:	e1 e0       	ldi	r30, 0x01	; 1
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	bb 1f       	adc	r27, r27
 5e0:	62 17       	cp	r22, r18
 5e2:	73 07       	cpc	r23, r19
 5e4:	84 07       	cpc	r24, r20
 5e6:	ba 07       	cpc	r27, r26
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <__divsf3_pse+0xaa>
 5ea:	62 1b       	sub	r22, r18
 5ec:	73 0b       	sbc	r23, r19
 5ee:	84 0b       	sbc	r24, r20
 5f0:	ba 0b       	sbc	r27, r26
 5f2:	ee 1f       	adc	r30, r30
 5f4:	88 f7       	brcc	.-30     	; 0x5d8 <__divsf3_pse+0x90>
 5f6:	e0 95       	com	r30
 5f8:	08 95       	ret

000005fa <__fixsfsi>:
 5fa:	04 d0       	rcall	.+8      	; 0x604 <__fixunssfsi>
 5fc:	68 94       	set
 5fe:	b1 11       	cpse	r27, r1
 600:	08 c1       	rjmp	.+528    	; 0x812 <__fp_szero>
 602:	08 95       	ret

00000604 <__fixunssfsi>:
 604:	d4 d0       	rcall	.+424    	; 0x7ae <__fp_splitA>
 606:	88 f0       	brcs	.+34     	; 0x62a <__fixunssfsi+0x26>
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	90 f0       	brcs	.+36     	; 0x630 <__fixunssfsi+0x2c>
 60c:	b9 2f       	mov	r27, r25
 60e:	99 27       	eor	r25, r25
 610:	b7 51       	subi	r27, 0x17	; 23
 612:	a0 f0       	brcs	.+40     	; 0x63c <__fixunssfsi+0x38>
 614:	d1 f0       	breq	.+52     	; 0x64a <__fixunssfsi+0x46>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	1a f0       	brmi	.+6      	; 0x626 <__fixunssfsi+0x22>
 620:	ba 95       	dec	r27
 622:	c9 f7       	brne	.-14     	; 0x616 <__fixunssfsi+0x12>
 624:	12 c0       	rjmp	.+36     	; 0x64a <__fixunssfsi+0x46>
 626:	b1 30       	cpi	r27, 0x01	; 1
 628:	81 f0       	breq	.+32     	; 0x64a <__fixunssfsi+0x46>
 62a:	f2 d0       	rcall	.+484    	; 0x810 <__fp_zero>
 62c:	b1 e0       	ldi	r27, 0x01	; 1
 62e:	08 95       	ret
 630:	ef c0       	rjmp	.+478    	; 0x810 <__fp_zero>
 632:	67 2f       	mov	r22, r23
 634:	78 2f       	mov	r23, r24
 636:	88 27       	eor	r24, r24
 638:	b8 5f       	subi	r27, 0xF8	; 248
 63a:	39 f0       	breq	.+14     	; 0x64a <__fixunssfsi+0x46>
 63c:	b9 3f       	cpi	r27, 0xF9	; 249
 63e:	cc f3       	brlt	.-14     	; 0x632 <__fixunssfsi+0x2e>
 640:	86 95       	lsr	r24
 642:	77 95       	ror	r23
 644:	67 95       	ror	r22
 646:	b3 95       	inc	r27
 648:	d9 f7       	brne	.-10     	; 0x640 <__fixunssfsi+0x3c>
 64a:	3e f4       	brtc	.+14     	; 0x65a <__fixunssfsi+0x56>
 64c:	90 95       	com	r25
 64e:	80 95       	com	r24
 650:	70 95       	com	r23
 652:	61 95       	neg	r22
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	8f 4f       	sbci	r24, 0xFF	; 255
 658:	9f 4f       	sbci	r25, 0xFF	; 255
 65a:	08 95       	ret

0000065c <__floatunsisf>:
 65c:	e8 94       	clt
 65e:	09 c0       	rjmp	.+18     	; 0x672 <__floatsisf+0x12>

00000660 <__floatsisf>:
 660:	97 fb       	bst	r25, 7
 662:	3e f4       	brtc	.+14     	; 0x672 <__floatsisf+0x12>
 664:	90 95       	com	r25
 666:	80 95       	com	r24
 668:	70 95       	com	r23
 66a:	61 95       	neg	r22
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	99 23       	and	r25, r25
 674:	a9 f0       	breq	.+42     	; 0x6a0 <__floatsisf+0x40>
 676:	f9 2f       	mov	r31, r25
 678:	96 e9       	ldi	r25, 0x96	; 150
 67a:	bb 27       	eor	r27, r27
 67c:	93 95       	inc	r25
 67e:	f6 95       	lsr	r31
 680:	87 95       	ror	r24
 682:	77 95       	ror	r23
 684:	67 95       	ror	r22
 686:	b7 95       	ror	r27
 688:	f1 11       	cpse	r31, r1
 68a:	f8 cf       	rjmp	.-16     	; 0x67c <__floatsisf+0x1c>
 68c:	fa f4       	brpl	.+62     	; 0x6cc <__floatsisf+0x6c>
 68e:	bb 0f       	add	r27, r27
 690:	11 f4       	brne	.+4      	; 0x696 <__floatsisf+0x36>
 692:	60 ff       	sbrs	r22, 0
 694:	1b c0       	rjmp	.+54     	; 0x6cc <__floatsisf+0x6c>
 696:	6f 5f       	subi	r22, 0xFF	; 255
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	16 c0       	rjmp	.+44     	; 0x6cc <__floatsisf+0x6c>
 6a0:	88 23       	and	r24, r24
 6a2:	11 f0       	breq	.+4      	; 0x6a8 <__floatsisf+0x48>
 6a4:	96 e9       	ldi	r25, 0x96	; 150
 6a6:	11 c0       	rjmp	.+34     	; 0x6ca <__floatsisf+0x6a>
 6a8:	77 23       	and	r23, r23
 6aa:	21 f0       	breq	.+8      	; 0x6b4 <__floatsisf+0x54>
 6ac:	9e e8       	ldi	r25, 0x8E	; 142
 6ae:	87 2f       	mov	r24, r23
 6b0:	76 2f       	mov	r23, r22
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <__floatsisf+0x5e>
 6b4:	66 23       	and	r22, r22
 6b6:	71 f0       	breq	.+28     	; 0x6d4 <__floatsisf+0x74>
 6b8:	96 e8       	ldi	r25, 0x86	; 134
 6ba:	86 2f       	mov	r24, r22
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	2a f0       	brmi	.+10     	; 0x6cc <__floatsisf+0x6c>
 6c2:	9a 95       	dec	r25
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	da f7       	brpl	.-10     	; 0x6c2 <__floatsisf+0x62>
 6cc:	88 0f       	add	r24, r24
 6ce:	96 95       	lsr	r25
 6d0:	87 95       	ror	r24
 6d2:	97 f9       	bld	r25, 7
 6d4:	08 95       	ret

000006d6 <floor>:
 6d6:	85 d0       	rcall	.+266    	; 0x7e2 <__fp_trunc>
 6d8:	80 f0       	brcs	.+32     	; 0x6fa <floor+0x24>
 6da:	9f 37       	cpi	r25, 0x7F	; 127
 6dc:	40 f4       	brcc	.+16     	; 0x6ee <floor+0x18>
 6de:	91 11       	cpse	r25, r1
 6e0:	0e f0       	brts	.+2      	; 0x6e4 <floor+0xe>
 6e2:	97 c0       	rjmp	.+302    	; 0x812 <__fp_szero>
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	80 e8       	ldi	r24, 0x80	; 128
 6ea:	9f eb       	ldi	r25, 0xBF	; 191
 6ec:	08 95       	ret
 6ee:	26 f4       	brtc	.+8      	; 0x6f8 <floor+0x22>
 6f0:	1b 16       	cp	r1, r27
 6f2:	61 1d       	adc	r22, r1
 6f4:	71 1d       	adc	r23, r1
 6f6:	81 1d       	adc	r24, r1
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <__fp_mintl>
 6fa:	21 c0       	rjmp	.+66     	; 0x73e <__fp_mpack>

000006fc <__fp_inf>:
 6fc:	97 f9       	bld	r25, 7
 6fe:	9f 67       	ori	r25, 0x7F	; 127
 700:	80 e8       	ldi	r24, 0x80	; 128
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	08 95       	ret

00000708 <__fp_mintl>:
 708:	88 23       	and	r24, r24
 70a:	71 f4       	brne	.+28     	; 0x728 <__fp_mintl+0x20>
 70c:	77 23       	and	r23, r23
 70e:	21 f0       	breq	.+8      	; 0x718 <__fp_mintl+0x10>
 710:	98 50       	subi	r25, 0x08	; 8
 712:	87 2b       	or	r24, r23
 714:	76 2f       	mov	r23, r22
 716:	07 c0       	rjmp	.+14     	; 0x726 <__fp_mintl+0x1e>
 718:	66 23       	and	r22, r22
 71a:	11 f4       	brne	.+4      	; 0x720 <__fp_mintl+0x18>
 71c:	99 27       	eor	r25, r25
 71e:	0d c0       	rjmp	.+26     	; 0x73a <__fp_mintl+0x32>
 720:	90 51       	subi	r25, 0x10	; 16
 722:	86 2b       	or	r24, r22
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	2a f0       	brmi	.+10     	; 0x734 <__fp_mintl+0x2c>
 72a:	9a 95       	dec	r25
 72c:	66 0f       	add	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	da f7       	brpl	.-10     	; 0x72a <__fp_mintl+0x22>
 734:	88 0f       	add	r24, r24
 736:	96 95       	lsr	r25
 738:	87 95       	ror	r24
 73a:	97 f9       	bld	r25, 7
 73c:	08 95       	ret

0000073e <__fp_mpack>:
 73e:	9f 3f       	cpi	r25, 0xFF	; 255
 740:	31 f0       	breq	.+12     	; 0x74e <__fp_mpack_finite+0xc>

00000742 <__fp_mpack_finite>:
 742:	91 50       	subi	r25, 0x01	; 1
 744:	20 f4       	brcc	.+8      	; 0x74e <__fp_mpack_finite+0xc>
 746:	87 95       	ror	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b7 95       	ror	r27
 74e:	88 0f       	add	r24, r24
 750:	91 1d       	adc	r25, r1
 752:	96 95       	lsr	r25
 754:	87 95       	ror	r24
 756:	97 f9       	bld	r25, 7
 758:	08 95       	ret

0000075a <__fp_nan>:
 75a:	9f ef       	ldi	r25, 0xFF	; 255
 75c:	80 ec       	ldi	r24, 0xC0	; 192
 75e:	08 95       	ret

00000760 <__fp_pscA>:
 760:	00 24       	eor	r0, r0
 762:	0a 94       	dec	r0
 764:	16 16       	cp	r1, r22
 766:	17 06       	cpc	r1, r23
 768:	18 06       	cpc	r1, r24
 76a:	09 06       	cpc	r0, r25
 76c:	08 95       	ret

0000076e <__fp_pscB>:
 76e:	00 24       	eor	r0, r0
 770:	0a 94       	dec	r0
 772:	12 16       	cp	r1, r18
 774:	13 06       	cpc	r1, r19
 776:	14 06       	cpc	r1, r20
 778:	05 06       	cpc	r0, r21
 77a:	08 95       	ret

0000077c <__fp_round>:
 77c:	09 2e       	mov	r0, r25
 77e:	03 94       	inc	r0
 780:	00 0c       	add	r0, r0
 782:	11 f4       	brne	.+4      	; 0x788 <__fp_round+0xc>
 784:	88 23       	and	r24, r24
 786:	52 f0       	brmi	.+20     	; 0x79c <__fp_round+0x20>
 788:	bb 0f       	add	r27, r27
 78a:	40 f4       	brcc	.+16     	; 0x79c <__fp_round+0x20>
 78c:	bf 2b       	or	r27, r31
 78e:	11 f4       	brne	.+4      	; 0x794 <__fp_round+0x18>
 790:	60 ff       	sbrs	r22, 0
 792:	04 c0       	rjmp	.+8      	; 0x79c <__fp_round+0x20>
 794:	6f 5f       	subi	r22, 0xFF	; 255
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	08 95       	ret

0000079e <__fp_split3>:
 79e:	57 fd       	sbrc	r21, 7
 7a0:	90 58       	subi	r25, 0x80	; 128
 7a2:	44 0f       	add	r20, r20
 7a4:	55 1f       	adc	r21, r21
 7a6:	59 f0       	breq	.+22     	; 0x7be <__fp_splitA+0x10>
 7a8:	5f 3f       	cpi	r21, 0xFF	; 255
 7aa:	71 f0       	breq	.+28     	; 0x7c8 <__fp_splitA+0x1a>
 7ac:	47 95       	ror	r20

000007ae <__fp_splitA>:
 7ae:	88 0f       	add	r24, r24
 7b0:	97 fb       	bst	r25, 7
 7b2:	99 1f       	adc	r25, r25
 7b4:	61 f0       	breq	.+24     	; 0x7ce <__fp_splitA+0x20>
 7b6:	9f 3f       	cpi	r25, 0xFF	; 255
 7b8:	79 f0       	breq	.+30     	; 0x7d8 <__fp_splitA+0x2a>
 7ba:	87 95       	ror	r24
 7bc:	08 95       	ret
 7be:	12 16       	cp	r1, r18
 7c0:	13 06       	cpc	r1, r19
 7c2:	14 06       	cpc	r1, r20
 7c4:	55 1f       	adc	r21, r21
 7c6:	f2 cf       	rjmp	.-28     	; 0x7ac <__fp_split3+0xe>
 7c8:	46 95       	lsr	r20
 7ca:	f1 df       	rcall	.-30     	; 0x7ae <__fp_splitA>
 7cc:	08 c0       	rjmp	.+16     	; 0x7de <__fp_splitA+0x30>
 7ce:	16 16       	cp	r1, r22
 7d0:	17 06       	cpc	r1, r23
 7d2:	18 06       	cpc	r1, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	f1 cf       	rjmp	.-30     	; 0x7ba <__fp_splitA+0xc>
 7d8:	86 95       	lsr	r24
 7da:	71 05       	cpc	r23, r1
 7dc:	61 05       	cpc	r22, r1
 7de:	08 94       	sec
 7e0:	08 95       	ret

000007e2 <__fp_trunc>:
 7e2:	e5 df       	rcall	.-54     	; 0x7ae <__fp_splitA>
 7e4:	a0 f0       	brcs	.+40     	; 0x80e <__fp_trunc+0x2c>
 7e6:	be e7       	ldi	r27, 0x7E	; 126
 7e8:	b9 17       	cp	r27, r25
 7ea:	88 f4       	brcc	.+34     	; 0x80e <__fp_trunc+0x2c>
 7ec:	bb 27       	eor	r27, r27
 7ee:	9f 38       	cpi	r25, 0x8F	; 143
 7f0:	60 f4       	brcc	.+24     	; 0x80a <__fp_trunc+0x28>
 7f2:	16 16       	cp	r1, r22
 7f4:	b1 1d       	adc	r27, r1
 7f6:	67 2f       	mov	r22, r23
 7f8:	78 2f       	mov	r23, r24
 7fa:	88 27       	eor	r24, r24
 7fc:	98 5f       	subi	r25, 0xF8	; 248
 7fe:	f7 cf       	rjmp	.-18     	; 0x7ee <__fp_trunc+0xc>
 800:	86 95       	lsr	r24
 802:	77 95       	ror	r23
 804:	67 95       	ror	r22
 806:	b1 1d       	adc	r27, r1
 808:	93 95       	inc	r25
 80a:	96 39       	cpi	r25, 0x96	; 150
 80c:	c8 f3       	brcs	.-14     	; 0x800 <__fp_trunc+0x1e>
 80e:	08 95       	ret

00000810 <__fp_zero>:
 810:	e8 94       	clt

00000812 <__fp_szero>:
 812:	bb 27       	eor	r27, r27
 814:	66 27       	eor	r22, r22
 816:	77 27       	eor	r23, r23
 818:	cb 01       	movw	r24, r22
 81a:	97 f9       	bld	r25, 7
 81c:	08 95       	ret

0000081e <__gesf2>:
 81e:	6e d0       	rcall	.+220    	; 0x8fc <__fp_cmp>
 820:	08 f4       	brcc	.+2      	; 0x824 <__gesf2+0x6>
 822:	8f ef       	ldi	r24, 0xFF	; 255
 824:	08 95       	ret

00000826 <__mulsf3>:
 826:	0a d0       	rcall	.+20     	; 0x83c <__mulsf3x>
 828:	a9 cf       	rjmp	.-174    	; 0x77c <__fp_round>
 82a:	9a df       	rcall	.-204    	; 0x760 <__fp_pscA>
 82c:	28 f0       	brcs	.+10     	; 0x838 <__mulsf3+0x12>
 82e:	9f df       	rcall	.-194    	; 0x76e <__fp_pscB>
 830:	18 f0       	brcs	.+6      	; 0x838 <__mulsf3+0x12>
 832:	95 23       	and	r25, r21
 834:	09 f0       	breq	.+2      	; 0x838 <__mulsf3+0x12>
 836:	62 cf       	rjmp	.-316    	; 0x6fc <__fp_inf>
 838:	90 cf       	rjmp	.-224    	; 0x75a <__fp_nan>
 83a:	eb cf       	rjmp	.-42     	; 0x812 <__fp_szero>

0000083c <__mulsf3x>:
 83c:	b0 df       	rcall	.-160    	; 0x79e <__fp_split3>
 83e:	a8 f3       	brcs	.-22     	; 0x82a <__mulsf3+0x4>

00000840 <__mulsf3_pse>:
 840:	99 23       	and	r25, r25
 842:	d9 f3       	breq	.-10     	; 0x83a <__mulsf3+0x14>
 844:	55 23       	and	r21, r21
 846:	c9 f3       	breq	.-14     	; 0x83a <__mulsf3+0x14>
 848:	95 0f       	add	r25, r21
 84a:	50 e0       	ldi	r21, 0x00	; 0
 84c:	55 1f       	adc	r21, r21
 84e:	aa 27       	eor	r26, r26
 850:	ee 27       	eor	r30, r30
 852:	ff 27       	eor	r31, r31
 854:	bb 27       	eor	r27, r27
 856:	00 24       	eor	r0, r0
 858:	08 94       	sec
 85a:	67 95       	ror	r22
 85c:	20 f4       	brcc	.+8      	; 0x866 <__mulsf3_pse+0x26>
 85e:	e2 0f       	add	r30, r18
 860:	f3 1f       	adc	r31, r19
 862:	b4 1f       	adc	r27, r20
 864:	0a 1e       	adc	r0, r26
 866:	22 0f       	add	r18, r18
 868:	33 1f       	adc	r19, r19
 86a:	44 1f       	adc	r20, r20
 86c:	aa 1f       	adc	r26, r26
 86e:	66 95       	lsr	r22
 870:	a9 f7       	brne	.-22     	; 0x85c <__mulsf3_pse+0x1c>
 872:	77 95       	ror	r23
 874:	30 f4       	brcc	.+12     	; 0x882 <__mulsf3_pse+0x42>
 876:	f3 0f       	add	r31, r19
 878:	b4 1f       	adc	r27, r20
 87a:	0a 1e       	adc	r0, r26
 87c:	12 1e       	adc	r1, r18
 87e:	08 f4       	brcc	.+2      	; 0x882 <__mulsf3_pse+0x42>
 880:	63 95       	inc	r22
 882:	33 0f       	add	r19, r19
 884:	44 1f       	adc	r20, r20
 886:	aa 1f       	adc	r26, r26
 888:	22 1f       	adc	r18, r18
 88a:	76 95       	lsr	r23
 88c:	99 f7       	brne	.-26     	; 0x874 <__mulsf3_pse+0x34>
 88e:	87 95       	ror	r24
 890:	20 f4       	brcc	.+8      	; 0x89a <__mulsf3_pse+0x5a>
 892:	b4 0f       	add	r27, r20
 894:	0a 1e       	adc	r0, r26
 896:	12 1e       	adc	r1, r18
 898:	63 1f       	adc	r22, r19
 89a:	44 0f       	add	r20, r20
 89c:	aa 1f       	adc	r26, r26
 89e:	22 1f       	adc	r18, r18
 8a0:	33 1f       	adc	r19, r19
 8a2:	86 95       	lsr	r24
 8a4:	a9 f7       	brne	.-22     	; 0x890 <__mulsf3_pse+0x50>
 8a6:	86 2f       	mov	r24, r22
 8a8:	71 2d       	mov	r23, r1
 8aa:	60 2d       	mov	r22, r0
 8ac:	11 24       	eor	r1, r1
 8ae:	9f 57       	subi	r25, 0x7F	; 127
 8b0:	50 40       	sbci	r21, 0x00	; 0
 8b2:	8a f0       	brmi	.+34     	; 0x8d6 <__mulsf3_pse+0x96>
 8b4:	e1 f0       	breq	.+56     	; 0x8ee <__mulsf3_pse+0xae>
 8b6:	88 23       	and	r24, r24
 8b8:	4a f0       	brmi	.+18     	; 0x8cc <__mulsf3_pse+0x8c>
 8ba:	ee 0f       	add	r30, r30
 8bc:	ff 1f       	adc	r31, r31
 8be:	bb 1f       	adc	r27, r27
 8c0:	66 1f       	adc	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	91 50       	subi	r25, 0x01	; 1
 8c8:	50 40       	sbci	r21, 0x00	; 0
 8ca:	a9 f7       	brne	.-22     	; 0x8b6 <__mulsf3_pse+0x76>
 8cc:	9e 3f       	cpi	r25, 0xFE	; 254
 8ce:	51 05       	cpc	r21, r1
 8d0:	70 f0       	brcs	.+28     	; 0x8ee <__mulsf3_pse+0xae>
 8d2:	14 cf       	rjmp	.-472    	; 0x6fc <__fp_inf>
 8d4:	9e cf       	rjmp	.-196    	; 0x812 <__fp_szero>
 8d6:	5f 3f       	cpi	r21, 0xFF	; 255
 8d8:	ec f3       	brlt	.-6      	; 0x8d4 <__mulsf3_pse+0x94>
 8da:	98 3e       	cpi	r25, 0xE8	; 232
 8dc:	dc f3       	brlt	.-10     	; 0x8d4 <__mulsf3_pse+0x94>
 8de:	86 95       	lsr	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	b7 95       	ror	r27
 8e6:	f7 95       	ror	r31
 8e8:	e7 95       	ror	r30
 8ea:	9f 5f       	subi	r25, 0xFF	; 255
 8ec:	c1 f7       	brne	.-16     	; 0x8de <__mulsf3_pse+0x9e>
 8ee:	fe 2b       	or	r31, r30
 8f0:	88 0f       	add	r24, r24
 8f2:	91 1d       	adc	r25, r1
 8f4:	96 95       	lsr	r25
 8f6:	87 95       	ror	r24
 8f8:	97 f9       	bld	r25, 7
 8fa:	08 95       	ret

000008fc <__fp_cmp>:
 8fc:	99 0f       	add	r25, r25
 8fe:	00 08       	sbc	r0, r0
 900:	55 0f       	add	r21, r21
 902:	aa 0b       	sbc	r26, r26
 904:	e0 e8       	ldi	r30, 0x80	; 128
 906:	fe ef       	ldi	r31, 0xFE	; 254
 908:	16 16       	cp	r1, r22
 90a:	17 06       	cpc	r1, r23
 90c:	e8 07       	cpc	r30, r24
 90e:	f9 07       	cpc	r31, r25
 910:	c0 f0       	brcs	.+48     	; 0x942 <__fp_cmp+0x46>
 912:	12 16       	cp	r1, r18
 914:	13 06       	cpc	r1, r19
 916:	e4 07       	cpc	r30, r20
 918:	f5 07       	cpc	r31, r21
 91a:	98 f0       	brcs	.+38     	; 0x942 <__fp_cmp+0x46>
 91c:	62 1b       	sub	r22, r18
 91e:	73 0b       	sbc	r23, r19
 920:	84 0b       	sbc	r24, r20
 922:	95 0b       	sbc	r25, r21
 924:	39 f4       	brne	.+14     	; 0x934 <__fp_cmp+0x38>
 926:	0a 26       	eor	r0, r26
 928:	61 f0       	breq	.+24     	; 0x942 <__fp_cmp+0x46>
 92a:	23 2b       	or	r18, r19
 92c:	24 2b       	or	r18, r20
 92e:	25 2b       	or	r18, r21
 930:	21 f4       	brne	.+8      	; 0x93a <__fp_cmp+0x3e>
 932:	08 95       	ret
 934:	0a 26       	eor	r0, r26
 936:	09 f4       	brne	.+2      	; 0x93a <__fp_cmp+0x3e>
 938:	a1 40       	sbci	r26, 0x01	; 1
 93a:	a6 95       	lsr	r26
 93c:	8f ef       	ldi	r24, 0xFF	; 255
 93e:	81 1d       	adc	r24, r1
 940:	81 1d       	adc	r24, r1
 942:	08 95       	ret

00000944 <__mulhi3>:
 944:	00 24       	eor	r0, r0
 946:	55 27       	eor	r21, r21
 948:	04 c0       	rjmp	.+8      	; 0x952 <__mulhi3+0xe>
 94a:	08 0e       	add	r0, r24
 94c:	59 1f       	adc	r21, r25
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	29 f0       	breq	.+10     	; 0x960 <__mulhi3+0x1c>
 956:	76 95       	lsr	r23
 958:	67 95       	ror	r22
 95a:	b8 f3       	brcs	.-18     	; 0x94a <__mulhi3+0x6>
 95c:	71 05       	cpc	r23, r1
 95e:	b9 f7       	brne	.-18     	; 0x94e <__mulhi3+0xa>
 960:	80 2d       	mov	r24, r0
 962:	95 2f       	mov	r25, r21
 964:	08 95       	ret

00000966 <__udivmodsi4>:
 966:	a1 e2       	ldi	r26, 0x21	; 33
 968:	1a 2e       	mov	r1, r26
 96a:	aa 1b       	sub	r26, r26
 96c:	bb 1b       	sub	r27, r27
 96e:	fd 01       	movw	r30, r26
 970:	0d c0       	rjmp	.+26     	; 0x98c <__udivmodsi4_ep>

00000972 <__udivmodsi4_loop>:
 972:	aa 1f       	adc	r26, r26
 974:	bb 1f       	adc	r27, r27
 976:	ee 1f       	adc	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	a2 17       	cp	r26, r18
 97c:	b3 07       	cpc	r27, r19
 97e:	e4 07       	cpc	r30, r20
 980:	f5 07       	cpc	r31, r21
 982:	20 f0       	brcs	.+8      	; 0x98c <__udivmodsi4_ep>
 984:	a2 1b       	sub	r26, r18
 986:	b3 0b       	sbc	r27, r19
 988:	e4 0b       	sbc	r30, r20
 98a:	f5 0b       	sbc	r31, r21

0000098c <__udivmodsi4_ep>:
 98c:	66 1f       	adc	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	1a 94       	dec	r1
 996:	69 f7       	brne	.-38     	; 0x972 <__udivmodsi4_loop>
 998:	60 95       	com	r22
 99a:	70 95       	com	r23
 99c:	80 95       	com	r24
 99e:	90 95       	com	r25
 9a0:	9b 01       	movw	r18, r22
 9a2:	ac 01       	movw	r20, r24
 9a4:	bd 01       	movw	r22, r26
 9a6:	cf 01       	movw	r24, r30
 9a8:	08 95       	ret

000009aa <malloc>:
 9aa:	0f 93       	push	r16
 9ac:	1f 93       	push	r17
 9ae:	cf 93       	push	r28
 9b0:	df 93       	push	r29
 9b2:	82 30       	cpi	r24, 0x02	; 2
 9b4:	91 05       	cpc	r25, r1
 9b6:	10 f4       	brcc	.+4      	; 0x9bc <malloc+0x12>
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__flp>
 9c0:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__flp+0x1>
 9c4:	20 e0       	ldi	r18, 0x00	; 0
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	a0 e0       	ldi	r26, 0x00	; 0
 9ca:	b0 e0       	ldi	r27, 0x00	; 0
 9cc:	30 97       	sbiw	r30, 0x00	; 0
 9ce:	19 f1       	breq	.+70     	; 0xa16 <malloc+0x6c>
 9d0:	40 81       	ld	r20, Z
 9d2:	51 81       	ldd	r21, Z+1	; 0x01
 9d4:	02 81       	ldd	r16, Z+2	; 0x02
 9d6:	13 81       	ldd	r17, Z+3	; 0x03
 9d8:	48 17       	cp	r20, r24
 9da:	59 07       	cpc	r21, r25
 9dc:	c8 f0       	brcs	.+50     	; 0xa10 <malloc+0x66>
 9de:	84 17       	cp	r24, r20
 9e0:	95 07       	cpc	r25, r21
 9e2:	69 f4       	brne	.+26     	; 0x9fe <malloc+0x54>
 9e4:	10 97       	sbiw	r26, 0x00	; 0
 9e6:	31 f0       	breq	.+12     	; 0x9f4 <malloc+0x4a>
 9e8:	12 96       	adiw	r26, 0x02	; 2
 9ea:	0c 93       	st	X, r16
 9ec:	12 97       	sbiw	r26, 0x02	; 2
 9ee:	13 96       	adiw	r26, 0x03	; 3
 9f0:	1c 93       	st	X, r17
 9f2:	27 c0       	rjmp	.+78     	; 0xa42 <malloc+0x98>
 9f4:	00 93 76 01 	sts	0x0176, r16	; 0x800176 <__flp>
 9f8:	10 93 77 01 	sts	0x0177, r17	; 0x800177 <__flp+0x1>
 9fc:	22 c0       	rjmp	.+68     	; 0xa42 <malloc+0x98>
 9fe:	21 15       	cp	r18, r1
 a00:	31 05       	cpc	r19, r1
 a02:	19 f0       	breq	.+6      	; 0xa0a <malloc+0x60>
 a04:	42 17       	cp	r20, r18
 a06:	53 07       	cpc	r21, r19
 a08:	18 f4       	brcc	.+6      	; 0xa10 <malloc+0x66>
 a0a:	9a 01       	movw	r18, r20
 a0c:	bd 01       	movw	r22, r26
 a0e:	ef 01       	movw	r28, r30
 a10:	df 01       	movw	r26, r30
 a12:	f8 01       	movw	r30, r16
 a14:	db cf       	rjmp	.-74     	; 0x9cc <malloc+0x22>
 a16:	21 15       	cp	r18, r1
 a18:	31 05       	cpc	r19, r1
 a1a:	f9 f0       	breq	.+62     	; 0xa5a <malloc+0xb0>
 a1c:	28 1b       	sub	r18, r24
 a1e:	39 0b       	sbc	r19, r25
 a20:	24 30       	cpi	r18, 0x04	; 4
 a22:	31 05       	cpc	r19, r1
 a24:	80 f4       	brcc	.+32     	; 0xa46 <malloc+0x9c>
 a26:	8a 81       	ldd	r24, Y+2	; 0x02
 a28:	9b 81       	ldd	r25, Y+3	; 0x03
 a2a:	61 15       	cp	r22, r1
 a2c:	71 05       	cpc	r23, r1
 a2e:	21 f0       	breq	.+8      	; 0xa38 <malloc+0x8e>
 a30:	fb 01       	movw	r30, r22
 a32:	93 83       	std	Z+3, r25	; 0x03
 a34:	82 83       	std	Z+2, r24	; 0x02
 a36:	04 c0       	rjmp	.+8      	; 0xa40 <malloc+0x96>
 a38:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__flp+0x1>
 a3c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__flp>
 a40:	fe 01       	movw	r30, r28
 a42:	32 96       	adiw	r30, 0x02	; 2
 a44:	44 c0       	rjmp	.+136    	; 0xace <malloc+0x124>
 a46:	fe 01       	movw	r30, r28
 a48:	e2 0f       	add	r30, r18
 a4a:	f3 1f       	adc	r31, r19
 a4c:	81 93       	st	Z+, r24
 a4e:	91 93       	st	Z+, r25
 a50:	22 50       	subi	r18, 0x02	; 2
 a52:	31 09       	sbc	r19, r1
 a54:	39 83       	std	Y+1, r19	; 0x01
 a56:	28 83       	st	Y, r18
 a58:	3a c0       	rjmp	.+116    	; 0xace <malloc+0x124>
 a5a:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__data_end>
 a5e:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__data_end+0x1>
 a62:	23 2b       	or	r18, r19
 a64:	41 f4       	brne	.+16     	; 0xa76 <malloc+0xcc>
 a66:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 a6a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 a6e:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <__data_end+0x1>
 a72:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <__data_end>
 a76:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 a7a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 a7e:	21 15       	cp	r18, r1
 a80:	31 05       	cpc	r19, r1
 a82:	41 f4       	brne	.+16     	; 0xa94 <malloc+0xea>
 a84:	2d b7       	in	r18, 0x3d	; 61
 a86:	3e b7       	in	r19, 0x3e	; 62
 a88:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 a8c:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 a90:	24 1b       	sub	r18, r20
 a92:	35 0b       	sbc	r19, r21
 a94:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <__data_end>
 a98:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <__data_end+0x1>
 a9c:	e2 17       	cp	r30, r18
 a9e:	f3 07       	cpc	r31, r19
 aa0:	a0 f4       	brcc	.+40     	; 0xaca <malloc+0x120>
 aa2:	2e 1b       	sub	r18, r30
 aa4:	3f 0b       	sbc	r19, r31
 aa6:	28 17       	cp	r18, r24
 aa8:	39 07       	cpc	r19, r25
 aaa:	78 f0       	brcs	.+30     	; 0xaca <malloc+0x120>
 aac:	ac 01       	movw	r20, r24
 aae:	4e 5f       	subi	r20, 0xFE	; 254
 ab0:	5f 4f       	sbci	r21, 0xFF	; 255
 ab2:	24 17       	cp	r18, r20
 ab4:	35 07       	cpc	r19, r21
 ab6:	48 f0       	brcs	.+18     	; 0xaca <malloc+0x120>
 ab8:	4e 0f       	add	r20, r30
 aba:	5f 1f       	adc	r21, r31
 abc:	50 93 75 01 	sts	0x0175, r21	; 0x800175 <__data_end+0x1>
 ac0:	40 93 74 01 	sts	0x0174, r20	; 0x800174 <__data_end>
 ac4:	81 93       	st	Z+, r24
 ac6:	91 93       	st	Z+, r25
 ac8:	02 c0       	rjmp	.+4      	; 0xace <malloc+0x124>
 aca:	e0 e0       	ldi	r30, 0x00	; 0
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	cf 01       	movw	r24, r30
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	1f 91       	pop	r17
 ad6:	0f 91       	pop	r16
 ad8:	08 95       	ret

00000ada <free>:
 ada:	cf 93       	push	r28
 adc:	df 93       	push	r29
 ade:	00 97       	sbiw	r24, 0x00	; 0
 ae0:	09 f4       	brne	.+2      	; 0xae4 <free+0xa>
 ae2:	81 c0       	rjmp	.+258    	; 0xbe6 <free+0x10c>
 ae4:	fc 01       	movw	r30, r24
 ae6:	32 97       	sbiw	r30, 0x02	; 2
 ae8:	13 82       	std	Z+3, r1	; 0x03
 aea:	12 82       	std	Z+2, r1	; 0x02
 aec:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <__flp>
 af0:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <__flp+0x1>
 af4:	10 97       	sbiw	r26, 0x00	; 0
 af6:	81 f4       	brne	.+32     	; 0xb18 <free+0x3e>
 af8:	20 81       	ld	r18, Z
 afa:	31 81       	ldd	r19, Z+1	; 0x01
 afc:	82 0f       	add	r24, r18
 afe:	93 1f       	adc	r25, r19
 b00:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__data_end>
 b04:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__data_end+0x1>
 b08:	28 17       	cp	r18, r24
 b0a:	39 07       	cpc	r19, r25
 b0c:	51 f5       	brne	.+84     	; 0xb62 <free+0x88>
 b0e:	f0 93 75 01 	sts	0x0175, r31	; 0x800175 <__data_end+0x1>
 b12:	e0 93 74 01 	sts	0x0174, r30	; 0x800174 <__data_end>
 b16:	67 c0       	rjmp	.+206    	; 0xbe6 <free+0x10c>
 b18:	ed 01       	movw	r28, r26
 b1a:	20 e0       	ldi	r18, 0x00	; 0
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	ce 17       	cp	r28, r30
 b20:	df 07       	cpc	r29, r31
 b22:	40 f4       	brcc	.+16     	; 0xb34 <free+0x5a>
 b24:	4a 81       	ldd	r20, Y+2	; 0x02
 b26:	5b 81       	ldd	r21, Y+3	; 0x03
 b28:	9e 01       	movw	r18, r28
 b2a:	41 15       	cp	r20, r1
 b2c:	51 05       	cpc	r21, r1
 b2e:	f1 f0       	breq	.+60     	; 0xb6c <free+0x92>
 b30:	ea 01       	movw	r28, r20
 b32:	f5 cf       	rjmp	.-22     	; 0xb1e <free+0x44>
 b34:	d3 83       	std	Z+3, r29	; 0x03
 b36:	c2 83       	std	Z+2, r28	; 0x02
 b38:	40 81       	ld	r20, Z
 b3a:	51 81       	ldd	r21, Z+1	; 0x01
 b3c:	84 0f       	add	r24, r20
 b3e:	95 1f       	adc	r25, r21
 b40:	c8 17       	cp	r28, r24
 b42:	d9 07       	cpc	r29, r25
 b44:	59 f4       	brne	.+22     	; 0xb5c <free+0x82>
 b46:	88 81       	ld	r24, Y
 b48:	99 81       	ldd	r25, Y+1	; 0x01
 b4a:	84 0f       	add	r24, r20
 b4c:	95 1f       	adc	r25, r21
 b4e:	02 96       	adiw	r24, 0x02	; 2
 b50:	91 83       	std	Z+1, r25	; 0x01
 b52:	80 83       	st	Z, r24
 b54:	8a 81       	ldd	r24, Y+2	; 0x02
 b56:	9b 81       	ldd	r25, Y+3	; 0x03
 b58:	93 83       	std	Z+3, r25	; 0x03
 b5a:	82 83       	std	Z+2, r24	; 0x02
 b5c:	21 15       	cp	r18, r1
 b5e:	31 05       	cpc	r19, r1
 b60:	29 f4       	brne	.+10     	; 0xb6c <free+0x92>
 b62:	f0 93 77 01 	sts	0x0177, r31	; 0x800177 <__flp+0x1>
 b66:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <__flp>
 b6a:	3d c0       	rjmp	.+122    	; 0xbe6 <free+0x10c>
 b6c:	e9 01       	movw	r28, r18
 b6e:	fb 83       	std	Y+3, r31	; 0x03
 b70:	ea 83       	std	Y+2, r30	; 0x02
 b72:	49 91       	ld	r20, Y+
 b74:	59 91       	ld	r21, Y+
 b76:	c4 0f       	add	r28, r20
 b78:	d5 1f       	adc	r29, r21
 b7a:	ec 17       	cp	r30, r28
 b7c:	fd 07       	cpc	r31, r29
 b7e:	61 f4       	brne	.+24     	; 0xb98 <free+0xbe>
 b80:	80 81       	ld	r24, Z
 b82:	91 81       	ldd	r25, Z+1	; 0x01
 b84:	84 0f       	add	r24, r20
 b86:	95 1f       	adc	r25, r21
 b88:	02 96       	adiw	r24, 0x02	; 2
 b8a:	e9 01       	movw	r28, r18
 b8c:	99 83       	std	Y+1, r25	; 0x01
 b8e:	88 83       	st	Y, r24
 b90:	82 81       	ldd	r24, Z+2	; 0x02
 b92:	93 81       	ldd	r25, Z+3	; 0x03
 b94:	9b 83       	std	Y+3, r25	; 0x03
 b96:	8a 83       	std	Y+2, r24	; 0x02
 b98:	e0 e0       	ldi	r30, 0x00	; 0
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	12 96       	adiw	r26, 0x02	; 2
 b9e:	8d 91       	ld	r24, X+
 ba0:	9c 91       	ld	r25, X
 ba2:	13 97       	sbiw	r26, 0x03	; 3
 ba4:	00 97       	sbiw	r24, 0x00	; 0
 ba6:	19 f0       	breq	.+6      	; 0xbae <free+0xd4>
 ba8:	fd 01       	movw	r30, r26
 baa:	dc 01       	movw	r26, r24
 bac:	f7 cf       	rjmp	.-18     	; 0xb9c <free+0xc2>
 bae:	8d 91       	ld	r24, X+
 bb0:	9c 91       	ld	r25, X
 bb2:	11 97       	sbiw	r26, 0x01	; 1
 bb4:	9d 01       	movw	r18, r26
 bb6:	2e 5f       	subi	r18, 0xFE	; 254
 bb8:	3f 4f       	sbci	r19, 0xFF	; 255
 bba:	82 0f       	add	r24, r18
 bbc:	93 1f       	adc	r25, r19
 bbe:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__data_end>
 bc2:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__data_end+0x1>
 bc6:	28 17       	cp	r18, r24
 bc8:	39 07       	cpc	r19, r25
 bca:	69 f4       	brne	.+26     	; 0xbe6 <free+0x10c>
 bcc:	30 97       	sbiw	r30, 0x00	; 0
 bce:	29 f4       	brne	.+10     	; 0xbda <free+0x100>
 bd0:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__flp+0x1>
 bd4:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__flp>
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <free+0x104>
 bda:	13 82       	std	Z+3, r1	; 0x03
 bdc:	12 82       	std	Z+2, r1	; 0x02
 bde:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <__data_end+0x1>
 be2:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <__data_end>
 be6:	df 91       	pop	r29
 be8:	cf 91       	pop	r28
 bea:	08 95       	ret

00000bec <_exit>:
 bec:	f8 94       	cli

00000bee <__stop_program>:
 bee:	ff cf       	rjmp	.-2      	; 0xbee <__stop_program>
