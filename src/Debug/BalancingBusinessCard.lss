
BalancingBusinessCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00000bf4  00000c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800174  00800174  00000d9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a16  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c0  00000000  00000000  00006bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001814  00000000  00000000  00007396  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001060  00000000  00000000  00008bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a34  00000000  00000000  00009c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005174  00000000  00000000  0000b640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  000107b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ef       	ldi	r30, 0xF4	; 244
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 37       	cpi	r26, 0x78	; 120
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	bd d0       	rcall	.+378    	; 0x1d4 <main>
  5a:	ca c5       	rjmp	.+2964   	; 0xbf0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z13convertStringPch>:
    default:
      *val = LIS3DH_SPI_4_WIRE;
      break;
  }
  return ret;
}
  5e:	6f 92       	push	r6
  60:	7f 92       	push	r7
  62:	8f 92       	push	r8
  64:	9f 92       	push	r9
  66:	af 92       	push	r10
  68:	bf 92       	push	r11
  6a:	cf 92       	push	r12
  6c:	df 92       	push	r13
  6e:	ef 92       	push	r14
  70:	ff 92       	push	r15
  72:	0f 93       	push	r16
  74:	1f 93       	push	r17
  76:	cf 93       	push	r28
  78:	8c 01       	movw	r16, r24
  7a:	c6 2f       	mov	r28, r22
  7c:	dc 01       	movw	r26, r24
  7e:	0d 90       	ld	r0, X+
  80:	00 20       	and	r0, r0
  82:	e9 f7       	brne	.-6      	; 0x7e <_Z13convertStringPch+0x20>
  84:	cd 01       	movw	r24, r26
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	e6 2e       	mov	r14, r22
  8a:	f1 2c       	mov	r15, r1
  8c:	b5 e0       	ldi	r27, 0x05	; 5
  8e:	eb 0e       	add	r14, r27
  90:	f1 1c       	adc	r15, r1
  92:	80 1b       	sub	r24, r16
  94:	91 0b       	sbc	r25, r17
  96:	b7 01       	movw	r22, r14
  98:	57 d4       	rcall	.+2222   	; 0x948 <__mulhi3>
  9a:	3c 01       	movw	r6, r24
  9c:	88 d4       	rcall	.+2320   	; 0x9ae <malloc>
  9e:	4c 01       	movw	r8, r24
  a0:	ee 0c       	add	r14, r14
  a2:	ff 1c       	adc	r15, r15
  a4:	9c 01       	movw	r18, r24
  a6:	26 5f       	subi	r18, 0xF6	; 246
  a8:	3f 4f       	sbci	r19, 0xFF	; 255
  aa:	bc 01       	movw	r22, r24
  ac:	68 01       	movw	r12, r16
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	0f 2e       	mov	r0, r31
  b4:	f4 e7       	ldi	r31, 0x74	; 116
  b6:	af 2e       	mov	r10, r31
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	bf 2e       	mov	r11, r31
  bc:	f0 2d       	mov	r31, r0
  be:	f8 01       	movw	r30, r16
  c0:	01 90       	ld	r0, Z+
  c2:	00 20       	and	r0, r0
  c4:	e9 f7       	brne	.-6      	; 0xc0 <_Z13convertStringPch+0x62>
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	e0 1b       	sub	r30, r16
  ca:	f1 0b       	sbc	r31, r17
  cc:	4e 17       	cp	r20, r30
  ce:	5f 07       	cpc	r21, r31
  d0:	08 f0       	brcs	.+2      	; 0xd4 <_Z13convertStringPch+0x76>
  d2:	45 c0       	rjmp	.+138    	; 0x15e <_Z13convertStringPch+0x100>
  d4:	d6 01       	movw	r26, r12
  d6:	ed 91       	ld	r30, X+
  d8:	6d 01       	movw	r12, r26
  da:	8e 2f       	mov	r24, r30
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	dc 01       	movw	r26, r24
  e0:	aa 0f       	add	r26, r26
  e2:	bb 1f       	adc	r27, r27
  e4:	aa 0f       	add	r26, r26
  e6:	bb 1f       	adc	r27, r27
  e8:	a8 0f       	add	r26, r24
  ea:	b9 1f       	adc	r27, r25
  ec:	aa 0f       	add	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	aa 59       	subi	r26, 0x9A	; 154
  f2:	bf 4f       	sbci	r27, 0xFF	; 255
  f4:	90 97       	sbiw	r26, 0x20	; 32
  f6:	89 f4       	brne	.+34     	; 0x11a <_Z13convertStringPch+0xbc>
  f8:	05 c0       	rjmp	.+10     	; 0x104 <_Z13convertStringPch+0xa6>
  fa:	cc 23       	and	r28, r28
  fc:	49 f1       	breq	.+82     	; 0x150 <_Z13convertStringPch+0xf2>
  fe:	f9 01       	movw	r30, r18
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	21 c0       	rjmp	.+66     	; 0x146 <_Z13convertStringPch+0xe8>
 104:	ea e6       	ldi	r30, 0x6A	; 106
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	db 01       	movw	r26, r22
 10a:	81 91       	ld	r24, Z+
 10c:	91 91       	ld	r25, Z+
 10e:	8d 93       	st	X+, r24
 110:	9d 93       	st	X+, r25
 112:	ea 15       	cp	r30, r10
 114:	fb 05       	cpc	r31, r11
 116:	c9 f7       	brne	.-14     	; 0x10a <_Z13convertStringPch+0xac>
 118:	f0 cf       	rjmp	.-32     	; 0xfa <_Z13convertStringPch+0x9c>
 11a:	8e 2f       	mov	r24, r30
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	e8 0f       	add	r30, r24
 12a:	f9 1f       	adc	r31, r25
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	e4 52       	subi	r30, 0x24	; 36
 132:	f2 40       	sbci	r31, 0x02	; 2
 134:	db 01       	movw	r26, r22
 136:	81 91       	ld	r24, Z+
 138:	91 91       	ld	r25, Z+
 13a:	8d 93       	st	X+, r24
 13c:	9d 93       	st	X+, r25
 13e:	2a 17       	cp	r18, r26
 140:	3b 07       	cpc	r19, r27
 142:	c9 f7       	brne	.-14     	; 0x136 <_Z13convertStringPch+0xd8>
 144:	da cf       	rjmp	.-76     	; 0xfa <_Z13convertStringPch+0x9c>
 146:	11 92       	st	Z+, r1
 148:	11 92       	st	Z+, r1
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	c8 13       	cpse	r28, r24
 14e:	fb cf       	rjmp	.-10     	; 0x146 <_Z13convertStringPch+0xe8>
 150:	4f 5f       	subi	r20, 0xFF	; 255
 152:	5f 4f       	sbci	r21, 0xFF	; 255
 154:	2e 0d       	add	r18, r14
 156:	3f 1d       	adc	r19, r15
 158:	6e 0d       	add	r22, r14
 15a:	7f 1d       	adc	r23, r15
 15c:	b0 cf       	rjmp	.-160    	; 0xbe <_Z13convertStringPch+0x60>
 15e:	b3 01       	movw	r22, r6
 160:	c4 01       	movw	r24, r8
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	df 90       	pop	r13
 16e:	cf 90       	pop	r12
 170:	bf 90       	pop	r11
 172:	af 90       	pop	r10
 174:	9f 90       	pop	r9
 176:	8f 90       	pop	r8
 178:	7f 90       	pop	r7
 17a:	6f 90       	pop	r6
 17c:	08 95       	ret

0000017e <_Z8ShowLinej>:
#include "alphabet.h"
#include "lis3dh_STdC/driver/lis3dh_reg.h"
#include "lis3dh_STdC/driver/lis3dh_reg.c"

void ShowLine(uint16_t line) {
    PORTA = (line & 0b000011111) << 3; // LED0, LED1, LED2, LED3, LED4
 17e:	28 2f       	mov	r18, r24
 180:	22 0f       	add	r18, r18
 182:	22 0f       	add	r18, r18
 184:	22 0f       	add	r18, r18
 186:	2b bb       	out	0x1b, r18	; 27
    PORTB = ((line & 0b000100000) << 1) ;  // LED5
 188:	28 2f       	mov	r18, r24
 18a:	20 72       	andi	r18, 0x20	; 32
 18c:	22 0f       	add	r18, r18
 18e:	28 bb       	out	0x18, r18	; 24
	PORTB |= ((line & 0b001000000) >> 1);  // LED6
 190:	48 b3       	in	r20, 0x18	; 24
 192:	9c 01       	movw	r18, r24
 194:	20 74       	andi	r18, 0x40	; 64
 196:	33 27       	eor	r19, r19
 198:	36 95       	lsr	r19
 19a:	27 95       	ror	r18
 19c:	24 2b       	or	r18, r20
 19e:	28 bb       	out	0x18, r18	; 24
	PORTB |= ((line & 0b010000000) >> 3);  // LED7
 1a0:	48 b3       	in	r20, 0x18	; 24
 1a2:	9c 01       	movw	r18, r24
 1a4:	20 78       	andi	r18, 0x80	; 128
 1a6:	33 27       	eor	r19, r19
 1a8:	36 95       	lsr	r19
 1aa:	27 95       	ror	r18
 1ac:	36 95       	lsr	r19
 1ae:	27 95       	ror	r18
 1b0:	36 95       	lsr	r19
 1b2:	27 95       	ror	r18
 1b4:	24 2b       	or	r18, r20
 1b6:	28 bb       	out	0x18, r18	; 24
	PORTB |= ((line & 0b100000000) >> 5);  // LED8
 1b8:	28 b3       	in	r18, 0x18	; 24
 1ba:	88 27       	eor	r24, r24
 1bc:	91 70       	andi	r25, 0x01	; 1
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	92 95       	swap	r25
 1c4:	82 95       	swap	r24
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	89 27       	eor	r24, r25
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	89 27       	eor	r24, r25
 1ce:	82 2b       	or	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret

000001d4 <main>:
static void tx_com(uint8_t *tx_buffer, uint16_t len);
static void platform_init(void);


int main()
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	a5 97       	sbiw	r28, 0x25	; 37
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
	// Configuring ATTiny
	DDRA=0xff;                            // Configure PORTA as output
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	8a bb       	out	0x1a, r24	; 26
	CLKPR = 1<<CLKPCE;
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	88 bd       	out	0x28, r24	; 40
	CLKPR = 1<<CLKPS1;                    // Set clock division to 4
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	88 bd       	out	0x28, r24	; 40
	
	TCCR0B = 1<<CS02;                     // Divide clock by 256
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	83 bf       	out	0x33, r24	; 51

	USICR = 1<<USIWM1;                    // Enable Two-Wire mode of USI register
 1f8:	80 e2       	ldi	r24, 0x20	; 32
 1fa:	8d b9       	out	0x0d, r24	; 13
	
	DDRB = 0b01111010;                    // Set LEDs on port B as output
 1fc:	8a e7       	ldi	r24, 0x7A	; 122
 1fe:	87 bb       	out	0x17, r24	; 23
	DDRA = 0b11111000;                    // Set LEDs on port A as output
 200:	88 ef       	ldi	r24, 0xF8	; 248
 202:	8a bb       	out	0x1a, r24	; 26

	// Parameters
	char message[] = "MAX";	              // Message to display
 204:	8d e4       	ldi	r24, 0x4D	; 77
 206:	91 e4       	ldi	r25, 0x41	; 65
 208:	9a 83       	std	Y+2, r25	; 0x02
 20a:	89 83       	std	Y+1, r24	; 0x01
 20c:	88 e5       	ldi	r24, 0x58	; 88
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	9c 83       	std	Y+4, r25	; 0x04
 212:	8b 83       	std	Y+3, r24	; 0x03
	bool countStarted = false;		      // State of switch counter, 1 if started and 0 if not
	uint32_t switchPreviousTime = 0;      // Time of triggering switch
	
	
	// Generate Flash Pattern
	struct FlashPattern flashPattern = convertString(message, kerning);
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	ce 01       	movw	r24, r28
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	21 df       	rcall	.-446    	; 0x5e <_Z13convertStringPch>
 21c:	6e 8f       	std	Y+30, r22	; 0x1e
 21e:	7f 8f       	std	Y+31, r23	; 0x1f
 220:	88 a3       	std	Y+32, r24	; 0x20
 222:	99 a3       	std	Y+33, r25	; 0x21
 224:	ce 8c       	ldd	r12, Y+30	; 0x1e
 226:	df 8c       	ldd	r13, Y+31	; 0x1f
 228:	dd 8e       	std	Y+29, r13	; 0x1d
 22a:	cc 8e       	std	Y+28, r12	; 0x1c
	int messageIndex = 0;			      // Index of displayed message
	
	bool messageStarted = false;		  // State of message display. Starts on a change of state
	bool switchState = true;              // State of debounced tilt switch, either 0 or 1
	bool countStarted = false;		      // State of switch counter, 1 if started and 0 if not
	uint32_t switchPreviousTime = 0;      // Time of triggering switch
 22c:	1c 8a       	std	Y+20, r1	; 0x14
 22e:	1d 8a       	std	Y+21, r1	; 0x15
 230:	1e 8a       	std	Y+22, r1	; 0x16
 232:	1f 8a       	std	Y+23, r1	; 0x17
	long double swingTime = 2000;         // Initial guess for time to swing back and forth
	int messageIndex = 0;			      // Index of displayed message
	
	bool messageStarted = false;		  // State of message display. Starts on a change of state
	bool switchState = true;              // State of debounced tilt switch, either 0 or 1
	bool countStarted = false;		      // State of switch counter, 1 if started and 0 if not
 234:	31 2c       	mov	r3, r1
	// uint32_t previousTime = 0;            // Used for debugging. TODO: Remove
	long double swingTime = 2000;         // Initial guess for time to swing back and forth
	int messageIndex = 0;			      // Index of displayed message
	
	bool messageStarted = false;		  // State of message display. Starts on a change of state
	bool switchState = true;              // State of debounced tilt switch, either 0 or 1
 236:	11 e0       	ldi	r17, 0x01	; 1
	uint32_t lastSwitchedTime = 0;	      // Time that the switch last changed
	// uint32_t previousTime = 0;            // Used for debugging. TODO: Remove
	long double swingTime = 2000;         // Initial guess for time to swing back and forth
	int messageIndex = 0;			      // Index of displayed message
	
	bool messageStarted = false;		  // State of message display. Starts on a change of state
 238:	40 e0       	ldi	r20, 0x00	; 0
	// Variable Initializations
	uint32_t timerOverflowCount = 0;      // Each tick is 0.032768s
	uint32_t totalTime = 0;               // Each tick of totalTime is 0.000128s
	uint32_t lastSwitchedTime = 0;	      // Time that the switch last changed
	// uint32_t previousTime = 0;            // Used for debugging. TODO: Remove
	long double swingTime = 2000;         // Initial guess for time to swing back and forth
 23a:	1d 82       	std	Y+5, r1	; 0x05
 23c:	00 e0       	ldi	r16, 0x00	; 0
 23e:	0f 2e       	mov	r0, r31
 240:	fa ef       	ldi	r31, 0xFA	; 250
 242:	2f 2e       	mov	r2, r31
 244:	f0 2d       	mov	r31, r0
 246:	24 e4       	ldi	r18, 0x44	; 68
 248:	29 87       	std	Y+9, r18	; 0x09
	

	// Variable Initializations
	uint32_t timerOverflowCount = 0;      // Each tick is 0.032768s
	uint32_t totalTime = 0;               // Each tick of totalTime is 0.000128s
	uint32_t lastSwitchedTime = 0;	      // Time that the switch last changed
 24a:	81 2c       	mov	r8, r1
 24c:	91 2c       	mov	r9, r1
 24e:	54 01       	movw	r10, r8
	uint32_t switchDebounceTime = 200;    // Time switch must debounce 
	uint8_t swingTimeTrailingAvgLen = 5;  // Trailing average number for swing time
	

	// Variable Initializations
	uint32_t timerOverflowCount = 0;      // Each tick is 0.032768s
 250:	41 2c       	mov	r4, r1
 252:	51 2c       	mov	r5, r1
 254:	32 01       	movw	r6, r4
	

	while(1)
	{ 
		// Calculate how many ticks each line should last
		timeToWait = swingTime / (2 * buffer + flashPattern.length);
 256:	c6 01       	movw	r24, r12
 258:	88 96       	adiw	r24, 0x28	; 40
 25a:	6c 01       	movw	r12, r24
 25c:	99 0f       	add	r25, r25
 25e:	ee 08       	sbc	r14, r14
 260:	ff 08       	sbc	r15, r15
 262:	c8 8e       	std	Y+24, r12	; 0x18
 264:	d9 8e       	std	Y+25, r13	; 0x19
 266:	ea 8e       	std	Y+26, r14	; 0x1a
 268:	fb 8e       	std	Y+27, r15	; 0x1b
		{
			if((totalTime - lastSwitchedTime) > (buffer * timeToWait))
			{
				if(switchState){
					// Get index of message using the time.
					messageIndex = flashPattern.length - floor((totalTime - lastSwitchedTime - buffer * timeToWait) / timeToWait);
 26a:	cc 8c       	ldd	r12, Y+28	; 0x1c
 26c:	dd 8c       	ldd	r13, Y+29	; 0x1d
 26e:	0d 2c       	mov	r0, r13
 270:	00 0c       	add	r0, r0
 272:	ee 08       	sbc	r14, r14
 274:	ff 08       	sbc	r15, r15
 276:	ca a2       	std	Y+34, r12	; 0x22
 278:	db a2       	std	Y+35, r13	; 0x23
 27a:	ec a2       	std	Y+36, r14	; 0x24
 27c:	fd a2       	std	Y+37, r15	; 0x25
 27e:	64 2f       	mov	r22, r20
 280:	0f c0       	rjmp	.+30     	; 0x2a0 <__stack+0x41>
 282:	dd 84       	ldd	r13, Y+13	; 0x0d
 284:	dd 82       	std	Y+5, r13	; 0x05
 286:	09 89       	ldd	r16, Y+17	; 0x11
 288:	2a 88       	ldd	r2, Y+18	; 0x12
 28a:	eb 88       	ldd	r14, Y+19	; 0x13
 28c:	e9 86       	std	Y+9, r14	; 0x09
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <__stack+0x41>
 292:	fd 84       	ldd	r15, Y+13	; 0x0d
 294:	fd 82       	std	Y+5, r15	; 0x05
 296:	09 89       	ldd	r16, Y+17	; 0x11
 298:	2a 88       	ldd	r2, Y+18	; 0x12
 29a:	cb 88       	ldd	r12, Y+19	; 0x13
 29c:	c9 86       	std	Y+9, r12	; 0x09
				{
					ShowLine(flashPattern.data[messageIndex]);
				}
				else // Message display finished
				{
					messageStarted = false;
 29e:	60 e0       	ldi	r22, 0x00	; 0
		// Calculate how many ticks each line should last
		timeToWait = swingTime / (2 * buffer + flashPattern.length);
				
		
		// Record total time since start 
		if ((TIFR & (1<<TOV0)) == (1<<TOV0)) // check if overflow flag is set
 2a0:	08 b6       	in	r0, 0x38	; 56
 2a2:	01 fe       	sbrs	r0, 1
 2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <__stack+0x59>
		{
			TIFR =  1<<TOV0;; //clear timer1 overflow flag
 2a6:	68 94       	set
 2a8:	dd 24       	eor	r13, r13
 2aa:	d1 f8       	bld	r13, 1
 2ac:	d8 be       	out	0x38, r13	; 56
			timerOverflowCount++;
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	42 1a       	sub	r4, r18
 2b2:	52 0a       	sbc	r5, r18
 2b4:	62 0a       	sbc	r6, r18
 2b6:	72 0a       	sbc	r7, r18
		}
		totalTime = TCNT0L + 256 * timerOverflowCount; // total time since start of uC
 2b8:	22 b7       	in	r18, 0x32	; 50
 2ba:	b6 2d       	mov	r27, r6
 2bc:	a5 2d       	mov	r26, r5
 2be:	94 2d       	mov	r25, r4
 2c0:	88 27       	eor	r24, r24
 2c2:	6c 01       	movw	r12, r24
 2c4:	7d 01       	movw	r14, r26
 2c6:	c2 0e       	add	r12, r18
 2c8:	d1 1c       	adc	r13, r1
 2ca:	e1 1c       	adc	r14, r1
 2cc:	f1 1c       	adc	r15, r1
		
		
		// Debounce tilt switch
		if (((PINA & (1<<PINA1)) != (switchState<<PINA1)) ) // Switch triggered
 2ce:	89 b3       	in	r24, 0x19	; 25
 2d0:	82 70       	andi	r24, 0x02	; 2
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	21 2f       	mov	r18, r17
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	82 17       	cp	r24, r18
 2de:	93 07       	cpc	r25, r19
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <__stack+0x85>
 2e2:	41 c0       	rjmp	.+130    	; 0x366 <__stack+0x107>
		{
			// PORTA = PORTA | (1<<PA3);
			if(countStarted == false)  // If counter hasn't started yet
 2e4:	33 20       	and	r3, r3
 2e6:	09 f4       	brne	.+2      	; 0x2ea <__stack+0x8b>
 2e8:	40 c0       	rjmp	.+128    	; 0x36a <__stack+0x10b>
				countStarted = true;               // Start counter
				switchPreviousTime = totalTime;    // Set counter start time
			}
			else               // If the counter has started
			{
				if ((totalTime - switchPreviousTime ) > switchDebounceTime) 
 2ea:	d7 01       	movw	r26, r14
 2ec:	c6 01       	movw	r24, r12
 2ee:	2c 89       	ldd	r18, Y+20	; 0x14
 2f0:	3d 89       	ldd	r19, Y+21	; 0x15
 2f2:	4e 89       	ldd	r20, Y+22	; 0x16
 2f4:	5f 89       	ldd	r21, Y+23	; 0x17
 2f6:	82 1b       	sub	r24, r18
 2f8:	93 0b       	sbc	r25, r19
 2fa:	a4 0b       	sbc	r26, r20
 2fc:	b5 0b       	sbc	r27, r21
 2fe:	89 3c       	cpi	r24, 0xC9	; 201
 300:	91 05       	cpc	r25, r1
 302:	a1 05       	cpc	r26, r1
 304:	b1 05       	cpc	r27, r1
 306:	b8 f1       	brcs	.+110    	; 0x376 <__stack+0x117>
				{
					// On change of state, update trailing average
					swingTime = swingTime * (swingTimeTrailingAvgLen - 1)/swingTimeTrailingAvgLen +
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 e8       	ldi	r20, 0x80	; 128
 30e:	50 e4       	ldi	r21, 0x40	; 64
 310:	6d 81       	ldd	r22, Y+5	; 0x05
 312:	70 2f       	mov	r23, r16
 314:	82 2d       	mov	r24, r2
 316:	99 85       	ldd	r25, Y+9	; 0x09
 318:	88 d2       	rcall	.+1296   	; 0x82a <__mulsf3>
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 ea       	ldi	r20, 0xA0	; 160
 320:	50 e4       	ldi	r21, 0x40	; 64
 322:	05 d1       	rcall	.+522    	; 0x52e <__divsf3>
 324:	6d 87       	std	Y+13, r22	; 0x0d
 326:	7e 87       	std	Y+14, r23	; 0x0e
 328:	8f 87       	std	Y+15, r24	; 0x0f
 32a:	98 8b       	std	Y+16, r25	; 0x10
								(totalTime - lastSwitchedTime) / swingTimeTrailingAvgLen;
 32c:	c7 01       	movw	r24, r14
 32e:	b6 01       	movw	r22, r12
 330:	68 19       	sub	r22, r8
 332:	79 09       	sbc	r23, r9
 334:	8a 09       	sbc	r24, r10
 336:	9b 09       	sbc	r25, r11
 338:	25 e0       	ldi	r18, 0x05	; 5
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	14 d3       	rcall	.+1576   	; 0x96a <__udivmodsi4>
 342:	ca 01       	movw	r24, r20
 344:	b9 01       	movw	r22, r18
 346:	8c d1       	rcall	.+792    	; 0x660 <__floatunsisf>
 348:	2d 85       	ldd	r18, Y+13	; 0x0d
 34a:	3e 85       	ldd	r19, Y+14	; 0x0e
 34c:	4f 85       	ldd	r20, Y+15	; 0x0f
 34e:	58 89       	ldd	r21, Y+16	; 0x10
 350:	8a d0       	rcall	.+276    	; 0x466 <__addsf3>
 352:	6d 87       	std	Y+13, r22	; 0x0d
 354:	79 8b       	std	Y+17, r23	; 0x11
 356:	8a 8b       	std	Y+18, r24	; 0x12
 358:	9b 8b       	std	Y+19, r25	; 0x13
					
					lastSwitchedTime = totalTime;
					switchState = !switchState;
 35a:	31 e0       	ldi	r19, 0x01	; 1
 35c:	13 27       	eor	r17, r19
				{
					// On change of state, update trailing average
					swingTime = swingTime * (swingTimeTrailingAvgLen - 1)/swingTimeTrailingAvgLen +
								(totalTime - lastSwitchedTime) / swingTimeTrailingAvgLen;
					
					lastSwitchedTime = totalTime;
 35e:	46 01       	movw	r8, r12
 360:	57 01       	movw	r10, r14
					switchState = !switchState;
					countStarted = false;			// End the counter
 362:	31 2c       	mov	r3, r1
 364:	11 c0       	rjmp	.+34     	; 0x388 <__stack+0x129>
				}
			}
		}
		else                                    // If switch is not triggered
		{
			countStarted = false;                   // End the counter
 366:	31 2c       	mov	r3, r1
 368:	06 c0       	rjmp	.+12     	; 0x376 <__stack+0x117>
		{
			// PORTA = PORTA | (1<<PA3);
			if(countStarted == false)  // If counter hasn't started yet
			{
				countStarted = true;               // Start counter
				switchPreviousTime = totalTime;    // Set counter start time
 36a:	cc 8a       	std	Y+20, r12	; 0x14
 36c:	dd 8a       	std	Y+21, r13	; 0x15
 36e:	ee 8a       	std	Y+22, r14	; 0x16
 370:	ff 8a       	std	Y+23, r15	; 0x17
		if (((PINA & (1<<PINA1)) != (switchState<<PINA1)) ) // Switch triggered
		{
			// PORTA = PORTA | (1<<PA3);
			if(countStarted == false)  // If counter hasn't started yet
			{
				countStarted = true;               // Start counter
 372:	33 24       	eor	r3, r3
 374:	33 94       	inc	r3
		{
			countStarted = false;                   // End the counter
		}
		
		
		if(messageStarted)
 376:	66 23       	and	r22, r22
 378:	09 f4       	brne	.+2      	; 0x37c <__stack+0x11d>
 37a:	92 cf       	rjmp	.-220    	; 0x2a0 <__stack+0x41>
 37c:	4d 81       	ldd	r20, Y+5	; 0x05
 37e:	4d 87       	std	Y+13, r20	; 0x0d
 380:	09 8b       	std	Y+17, r16	; 0x11
 382:	2a 8a       	std	Y+18, r2	; 0x12
 384:	59 85       	ldd	r21, Y+9	; 0x09
 386:	5b 8b       	std	Y+19, r21	; 0x13
	

	while(1)
	{ 
		// Calculate how many ticks each line should last
		timeToWait = swingTime / (2 * buffer + flashPattern.length);
 388:	68 8d       	ldd	r22, Y+24	; 0x18
 38a:	79 8d       	ldd	r23, Y+25	; 0x19
 38c:	8a 8d       	ldd	r24, Y+26	; 0x1a
 38e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 390:	69 d1       	rcall	.+722    	; 0x664 <__floatsisf>
 392:	9b 01       	movw	r18, r22
 394:	ac 01       	movw	r20, r24
 396:	6d 81       	ldd	r22, Y+5	; 0x05
 398:	70 2f       	mov	r23, r16
 39a:	82 2d       	mov	r24, r2
 39c:	99 85       	ldd	r25, Y+9	; 0x09
 39e:	c7 d0       	rcall	.+398    	; 0x52e <__divsf3>
 3a0:	6d 83       	std	Y+5, r22	; 0x05
 3a2:	7e 83       	std	Y+6, r23	; 0x06
 3a4:	8f 83       	std	Y+7, r24	; 0x07
 3a6:	98 87       	std	Y+8, r25	; 0x08
		}
		
		
		if(messageStarted)
		{
			if((totalTime - lastSwitchedTime) > (buffer * timeToWait))
 3a8:	c7 01       	movw	r24, r14
 3aa:	b6 01       	movw	r22, r12
 3ac:	68 19       	sub	r22, r8
 3ae:	79 09       	sbc	r23, r9
 3b0:	8a 09       	sbc	r24, r10
 3b2:	9b 09       	sbc	r25, r11
 3b4:	55 d1       	rcall	.+682    	; 0x660 <__floatunsisf>
 3b6:	6b 01       	movw	r12, r22
 3b8:	7c 01       	movw	r14, r24
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 ea       	ldi	r20, 0xA0	; 160
 3c0:	51 e4       	ldi	r21, 0x41	; 65
 3c2:	6d 81       	ldd	r22, Y+5	; 0x05
 3c4:	7e 81       	ldd	r23, Y+6	; 0x06
 3c6:	8f 81       	ldd	r24, Y+7	; 0x07
 3c8:	98 85       	ldd	r25, Y+8	; 0x08
 3ca:	2f d2       	rcall	.+1118   	; 0x82a <__mulsf3>
 3cc:	69 87       	std	Y+9, r22	; 0x09
 3ce:	7a 87       	std	Y+10, r23	; 0x0a
 3d0:	8b 87       	std	Y+11, r24	; 0x0b
 3d2:	9c 87       	std	Y+12, r25	; 0x0c
 3d4:	9b 01       	movw	r18, r22
 3d6:	ac 01       	movw	r20, r24
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	22 d2       	rcall	.+1092   	; 0x822 <__gesf2>
 3de:	18 16       	cp	r1, r24
 3e0:	0c f0       	brlt	.+2      	; 0x3e4 <__stack+0x185>
 3e2:	4f cf       	rjmp	.-354    	; 0x282 <__stack+0x23>
			{
				if(switchState){
 3e4:	11 23       	and	r17, r17
 3e6:	c9 f0       	breq	.+50     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
					// Get index of message using the time.
					messageIndex = flashPattern.length - floor((totalTime - lastSwitchedTime - buffer * timeToWait) / timeToWait);
 3e8:	29 85       	ldd	r18, Y+9	; 0x09
 3ea:	3a 85       	ldd	r19, Y+10	; 0x0a
 3ec:	4b 85       	ldd	r20, Y+11	; 0x0b
 3ee:	5c 85       	ldd	r21, Y+12	; 0x0c
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	37 d0       	rcall	.+110    	; 0x464 <__subsf3>
 3f6:	2d 81       	ldd	r18, Y+5	; 0x05
 3f8:	3e 81       	ldd	r19, Y+6	; 0x06
 3fa:	4f 81       	ldd	r20, Y+7	; 0x07
 3fc:	58 85       	ldd	r21, Y+8	; 0x08
 3fe:	97 d0       	rcall	.+302    	; 0x52e <__divsf3>
 400:	6c d1       	rcall	.+728    	; 0x6da <floor>
 402:	6b 01       	movw	r12, r22
 404:	7c 01       	movw	r14, r24
 406:	6a a1       	ldd	r22, Y+34	; 0x22
 408:	7b a1       	ldd	r23, Y+35	; 0x23
 40a:	8c a1       	ldd	r24, Y+36	; 0x24
 40c:	9d a1       	ldd	r25, Y+37	; 0x25
 40e:	2a d1       	rcall	.+596    	; 0x664 <__floatsisf>
 410:	a7 01       	movw	r20, r14
 412:	96 01       	movw	r18, r12
 414:	27 d0       	rcall	.+78     	; 0x464 <__subsf3>
 416:	f3 d0       	rcall	.+486    	; 0x5fe <__fixsfsi>
 418:	0e c0       	rjmp	.+28     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				}
				else
				{
					// Get index of message using the time.
					messageIndex = floor((totalTime - lastSwitchedTime - buffer * timeToWait) / timeToWait);
 41a:	29 85       	ldd	r18, Y+9	; 0x09
 41c:	3a 85       	ldd	r19, Y+10	; 0x0a
 41e:	4b 85       	ldd	r20, Y+11	; 0x0b
 420:	5c 85       	ldd	r21, Y+12	; 0x0c
 422:	c7 01       	movw	r24, r14
 424:	b6 01       	movw	r22, r12
 426:	1e d0       	rcall	.+60     	; 0x464 <__subsf3>
 428:	2d 81       	ldd	r18, Y+5	; 0x05
 42a:	3e 81       	ldd	r19, Y+6	; 0x06
 42c:	4f 81       	ldd	r20, Y+7	; 0x07
 42e:	58 85       	ldd	r21, Y+8	; 0x08
 430:	7e d0       	rcall	.+252    	; 0x52e <__divsf3>
 432:	53 d1       	rcall	.+678    	; 0x6da <floor>
 434:	e4 d0       	rcall	.+456    	; 0x5fe <__fixsfsi>
					
				}
				if(messageIndex < flashPattern.length)
 436:	cc 8c       	ldd	r12, Y+28	; 0x1c
 438:	dd 8c       	ldd	r13, Y+29	; 0x1d
 43a:	6c 15       	cp	r22, r12
 43c:	7d 05       	cpc	r23, r13
 43e:	0c f0       	brlt	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	28 cf       	rjmp	.-432    	; 0x292 <__stack+0x33>
				{
					ShowLine(flashPattern.data[messageIndex]);
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	e8 a1       	ldd	r30, Y+32	; 0x20
 448:	f9 a1       	ldd	r31, Y+33	; 0x21
 44a:	e6 0f       	add	r30, r22
 44c:	f7 1f       	adc	r31, r23
 44e:	80 81       	ld	r24, Z
 450:	91 81       	ldd	r25, Z+1	; 0x01
 452:	95 de       	rcall	.-726    	; 0x17e <_Z8ShowLinej>
 454:	dd 84       	ldd	r13, Y+13	; 0x0d
 456:	dd 82       	std	Y+5, r13	; 0x05
 458:	09 89       	ldd	r16, Y+17	; 0x11
 45a:	2a 88       	ldd	r2, Y+18	; 0x12
 45c:	eb 88       	ldd	r14, Y+19	; 0x13
 45e:	e9 86       	std	Y+9, r14	; 0x09
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	1e cf       	rjmp	.-452    	; 0x2a0 <__stack+0x41>

00000464 <__subsf3>:
 464:	50 58       	subi	r21, 0x80	; 128

00000466 <__addsf3>:
 466:	bb 27       	eor	r27, r27
 468:	aa 27       	eor	r26, r26
 46a:	0e d0       	rcall	.+28     	; 0x488 <__addsf3x>
 46c:	89 c1       	rjmp	.+786    	; 0x780 <__fp_round>
 46e:	7a d1       	rcall	.+756    	; 0x764 <__fp_pscA>
 470:	30 f0       	brcs	.+12     	; 0x47e <__addsf3+0x18>
 472:	7f d1       	rcall	.+766    	; 0x772 <__fp_pscB>
 474:	20 f0       	brcs	.+8      	; 0x47e <__addsf3+0x18>
 476:	31 f4       	brne	.+12     	; 0x484 <__addsf3+0x1e>
 478:	9f 3f       	cpi	r25, 0xFF	; 255
 47a:	11 f4       	brne	.+4      	; 0x480 <__addsf3+0x1a>
 47c:	1e f4       	brtc	.+6      	; 0x484 <__addsf3+0x1e>
 47e:	6f c1       	rjmp	.+734    	; 0x75e <__fp_nan>
 480:	0e f4       	brtc	.+2      	; 0x484 <__addsf3+0x1e>
 482:	e0 95       	com	r30
 484:	e7 fb       	bst	r30, 7
 486:	3c c1       	rjmp	.+632    	; 0x700 <__fp_inf>

00000488 <__addsf3x>:
 488:	e9 2f       	mov	r30, r25
 48a:	8b d1       	rcall	.+790    	; 0x7a2 <__fp_split3>
 48c:	80 f3       	brcs	.-32     	; 0x46e <__addsf3+0x8>
 48e:	ba 17       	cp	r27, r26
 490:	62 07       	cpc	r22, r18
 492:	73 07       	cpc	r23, r19
 494:	84 07       	cpc	r24, r20
 496:	95 07       	cpc	r25, r21
 498:	18 f0       	brcs	.+6      	; 0x4a0 <__addsf3x+0x18>
 49a:	71 f4       	brne	.+28     	; 0x4b8 <__addsf3x+0x30>
 49c:	9e f5       	brtc	.+102    	; 0x504 <__addsf3x+0x7c>
 49e:	ba c1       	rjmp	.+884    	; 0x814 <__fp_zero>
 4a0:	0e f4       	brtc	.+2      	; 0x4a4 <__addsf3x+0x1c>
 4a2:	e0 95       	com	r30
 4a4:	0b 2e       	mov	r0, r27
 4a6:	ba 2f       	mov	r27, r26
 4a8:	a0 2d       	mov	r26, r0
 4aa:	0b 01       	movw	r0, r22
 4ac:	b9 01       	movw	r22, r18
 4ae:	90 01       	movw	r18, r0
 4b0:	0c 01       	movw	r0, r24
 4b2:	ca 01       	movw	r24, r20
 4b4:	a0 01       	movw	r20, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	ff 27       	eor	r31, r31
 4ba:	59 1b       	sub	r21, r25
 4bc:	99 f0       	breq	.+38     	; 0x4e4 <__addsf3x+0x5c>
 4be:	59 3f       	cpi	r21, 0xF9	; 249
 4c0:	50 f4       	brcc	.+20     	; 0x4d6 <__addsf3x+0x4e>
 4c2:	50 3e       	cpi	r21, 0xE0	; 224
 4c4:	68 f1       	brcs	.+90     	; 0x520 <__addsf3x+0x98>
 4c6:	1a 16       	cp	r1, r26
 4c8:	f0 40       	sbci	r31, 0x00	; 0
 4ca:	a2 2f       	mov	r26, r18
 4cc:	23 2f       	mov	r18, r19
 4ce:	34 2f       	mov	r19, r20
 4d0:	44 27       	eor	r20, r20
 4d2:	58 5f       	subi	r21, 0xF8	; 248
 4d4:	f3 cf       	rjmp	.-26     	; 0x4bc <__addsf3x+0x34>
 4d6:	46 95       	lsr	r20
 4d8:	37 95       	ror	r19
 4da:	27 95       	ror	r18
 4dc:	a7 95       	ror	r26
 4de:	f0 40       	sbci	r31, 0x00	; 0
 4e0:	53 95       	inc	r21
 4e2:	c9 f7       	brne	.-14     	; 0x4d6 <__addsf3x+0x4e>
 4e4:	7e f4       	brtc	.+30     	; 0x504 <__addsf3x+0x7c>
 4e6:	1f 16       	cp	r1, r31
 4e8:	ba 0b       	sbc	r27, r26
 4ea:	62 0b       	sbc	r22, r18
 4ec:	73 0b       	sbc	r23, r19
 4ee:	84 0b       	sbc	r24, r20
 4f0:	ba f0       	brmi	.+46     	; 0x520 <__addsf3x+0x98>
 4f2:	91 50       	subi	r25, 0x01	; 1
 4f4:	a1 f0       	breq	.+40     	; 0x51e <__addsf3x+0x96>
 4f6:	ff 0f       	add	r31, r31
 4f8:	bb 1f       	adc	r27, r27
 4fa:	66 1f       	adc	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	c2 f7       	brpl	.-16     	; 0x4f2 <__addsf3x+0x6a>
 502:	0e c0       	rjmp	.+28     	; 0x520 <__addsf3x+0x98>
 504:	ba 0f       	add	r27, r26
 506:	62 1f       	adc	r22, r18
 508:	73 1f       	adc	r23, r19
 50a:	84 1f       	adc	r24, r20
 50c:	48 f4       	brcc	.+18     	; 0x520 <__addsf3x+0x98>
 50e:	87 95       	ror	r24
 510:	77 95       	ror	r23
 512:	67 95       	ror	r22
 514:	b7 95       	ror	r27
 516:	f7 95       	ror	r31
 518:	9e 3f       	cpi	r25, 0xFE	; 254
 51a:	08 f0       	brcs	.+2      	; 0x51e <__addsf3x+0x96>
 51c:	b3 cf       	rjmp	.-154    	; 0x484 <__addsf3+0x1e>
 51e:	93 95       	inc	r25
 520:	88 0f       	add	r24, r24
 522:	08 f0       	brcs	.+2      	; 0x526 <__addsf3x+0x9e>
 524:	99 27       	eor	r25, r25
 526:	ee 0f       	add	r30, r30
 528:	97 95       	ror	r25
 52a:	87 95       	ror	r24
 52c:	08 95       	ret

0000052e <__divsf3>:
 52e:	0c d0       	rcall	.+24     	; 0x548 <__divsf3x>
 530:	27 c1       	rjmp	.+590    	; 0x780 <__fp_round>
 532:	1f d1       	rcall	.+574    	; 0x772 <__fp_pscB>
 534:	40 f0       	brcs	.+16     	; 0x546 <__divsf3+0x18>
 536:	16 d1       	rcall	.+556    	; 0x764 <__fp_pscA>
 538:	30 f0       	brcs	.+12     	; 0x546 <__divsf3+0x18>
 53a:	21 f4       	brne	.+8      	; 0x544 <__divsf3+0x16>
 53c:	5f 3f       	cpi	r21, 0xFF	; 255
 53e:	19 f0       	breq	.+6      	; 0x546 <__divsf3+0x18>
 540:	df c0       	rjmp	.+446    	; 0x700 <__fp_inf>
 542:	51 11       	cpse	r21, r1
 544:	68 c1       	rjmp	.+720    	; 0x816 <__fp_szero>
 546:	0b c1       	rjmp	.+534    	; 0x75e <__fp_nan>

00000548 <__divsf3x>:
 548:	2c d1       	rcall	.+600    	; 0x7a2 <__fp_split3>
 54a:	98 f3       	brcs	.-26     	; 0x532 <__divsf3+0x4>

0000054c <__divsf3_pse>:
 54c:	99 23       	and	r25, r25
 54e:	c9 f3       	breq	.-14     	; 0x542 <__divsf3+0x14>
 550:	55 23       	and	r21, r21
 552:	b1 f3       	breq	.-20     	; 0x540 <__divsf3+0x12>
 554:	95 1b       	sub	r25, r21
 556:	55 0b       	sbc	r21, r21
 558:	bb 27       	eor	r27, r27
 55a:	aa 27       	eor	r26, r26
 55c:	62 17       	cp	r22, r18
 55e:	73 07       	cpc	r23, r19
 560:	84 07       	cpc	r24, r20
 562:	38 f0       	brcs	.+14     	; 0x572 <__divsf3_pse+0x26>
 564:	9f 5f       	subi	r25, 0xFF	; 255
 566:	5f 4f       	sbci	r21, 0xFF	; 255
 568:	22 0f       	add	r18, r18
 56a:	33 1f       	adc	r19, r19
 56c:	44 1f       	adc	r20, r20
 56e:	aa 1f       	adc	r26, r26
 570:	a9 f3       	breq	.-22     	; 0x55c <__divsf3_pse+0x10>
 572:	33 d0       	rcall	.+102    	; 0x5da <__divsf3_pse+0x8e>
 574:	0e 2e       	mov	r0, r30
 576:	3a f0       	brmi	.+14     	; 0x586 <__divsf3_pse+0x3a>
 578:	e0 e8       	ldi	r30, 0x80	; 128
 57a:	30 d0       	rcall	.+96     	; 0x5dc <__divsf3_pse+0x90>
 57c:	91 50       	subi	r25, 0x01	; 1
 57e:	50 40       	sbci	r21, 0x00	; 0
 580:	e6 95       	lsr	r30
 582:	00 1c       	adc	r0, r0
 584:	ca f7       	brpl	.-14     	; 0x578 <__divsf3_pse+0x2c>
 586:	29 d0       	rcall	.+82     	; 0x5da <__divsf3_pse+0x8e>
 588:	fe 2f       	mov	r31, r30
 58a:	27 d0       	rcall	.+78     	; 0x5da <__divsf3_pse+0x8e>
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	bb 1f       	adc	r27, r27
 594:	26 17       	cp	r18, r22
 596:	37 07       	cpc	r19, r23
 598:	48 07       	cpc	r20, r24
 59a:	ab 07       	cpc	r26, r27
 59c:	b0 e8       	ldi	r27, 0x80	; 128
 59e:	09 f0       	breq	.+2      	; 0x5a2 <__divsf3_pse+0x56>
 5a0:	bb 0b       	sbc	r27, r27
 5a2:	80 2d       	mov	r24, r0
 5a4:	bf 01       	movw	r22, r30
 5a6:	ff 27       	eor	r31, r31
 5a8:	93 58       	subi	r25, 0x83	; 131
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255
 5ac:	2a f0       	brmi	.+10     	; 0x5b8 <__divsf3_pse+0x6c>
 5ae:	9e 3f       	cpi	r25, 0xFE	; 254
 5b0:	51 05       	cpc	r21, r1
 5b2:	68 f0       	brcs	.+26     	; 0x5ce <__divsf3_pse+0x82>
 5b4:	a5 c0       	rjmp	.+330    	; 0x700 <__fp_inf>
 5b6:	2f c1       	rjmp	.+606    	; 0x816 <__fp_szero>
 5b8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ba:	ec f3       	brlt	.-6      	; 0x5b6 <__divsf3_pse+0x6a>
 5bc:	98 3e       	cpi	r25, 0xE8	; 232
 5be:	dc f3       	brlt	.-10     	; 0x5b6 <__divsf3_pse+0x6a>
 5c0:	86 95       	lsr	r24
 5c2:	77 95       	ror	r23
 5c4:	67 95       	ror	r22
 5c6:	b7 95       	ror	r27
 5c8:	f7 95       	ror	r31
 5ca:	9f 5f       	subi	r25, 0xFF	; 255
 5cc:	c9 f7       	brne	.-14     	; 0x5c0 <__divsf3_pse+0x74>
 5ce:	88 0f       	add	r24, r24
 5d0:	91 1d       	adc	r25, r1
 5d2:	96 95       	lsr	r25
 5d4:	87 95       	ror	r24
 5d6:	97 f9       	bld	r25, 7
 5d8:	08 95       	ret
 5da:	e1 e0       	ldi	r30, 0x01	; 1
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	88 1f       	adc	r24, r24
 5e2:	bb 1f       	adc	r27, r27
 5e4:	62 17       	cp	r22, r18
 5e6:	73 07       	cpc	r23, r19
 5e8:	84 07       	cpc	r24, r20
 5ea:	ba 07       	cpc	r27, r26
 5ec:	20 f0       	brcs	.+8      	; 0x5f6 <__divsf3_pse+0xaa>
 5ee:	62 1b       	sub	r22, r18
 5f0:	73 0b       	sbc	r23, r19
 5f2:	84 0b       	sbc	r24, r20
 5f4:	ba 0b       	sbc	r27, r26
 5f6:	ee 1f       	adc	r30, r30
 5f8:	88 f7       	brcc	.-30     	; 0x5dc <__divsf3_pse+0x90>
 5fa:	e0 95       	com	r30
 5fc:	08 95       	ret

000005fe <__fixsfsi>:
 5fe:	04 d0       	rcall	.+8      	; 0x608 <__fixunssfsi>
 600:	68 94       	set
 602:	b1 11       	cpse	r27, r1
 604:	08 c1       	rjmp	.+528    	; 0x816 <__fp_szero>
 606:	08 95       	ret

00000608 <__fixunssfsi>:
 608:	d4 d0       	rcall	.+424    	; 0x7b2 <__fp_splitA>
 60a:	88 f0       	brcs	.+34     	; 0x62e <__fixunssfsi+0x26>
 60c:	9f 57       	subi	r25, 0x7F	; 127
 60e:	90 f0       	brcs	.+36     	; 0x634 <__fixunssfsi+0x2c>
 610:	b9 2f       	mov	r27, r25
 612:	99 27       	eor	r25, r25
 614:	b7 51       	subi	r27, 0x17	; 23
 616:	a0 f0       	brcs	.+40     	; 0x640 <__fixunssfsi+0x38>
 618:	d1 f0       	breq	.+52     	; 0x64e <__fixunssfsi+0x46>
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	1a f0       	brmi	.+6      	; 0x62a <__fixunssfsi+0x22>
 624:	ba 95       	dec	r27
 626:	c9 f7       	brne	.-14     	; 0x61a <__fixunssfsi+0x12>
 628:	12 c0       	rjmp	.+36     	; 0x64e <__fixunssfsi+0x46>
 62a:	b1 30       	cpi	r27, 0x01	; 1
 62c:	81 f0       	breq	.+32     	; 0x64e <__fixunssfsi+0x46>
 62e:	f2 d0       	rcall	.+484    	; 0x814 <__fp_zero>
 630:	b1 e0       	ldi	r27, 0x01	; 1
 632:	08 95       	ret
 634:	ef c0       	rjmp	.+478    	; 0x814 <__fp_zero>
 636:	67 2f       	mov	r22, r23
 638:	78 2f       	mov	r23, r24
 63a:	88 27       	eor	r24, r24
 63c:	b8 5f       	subi	r27, 0xF8	; 248
 63e:	39 f0       	breq	.+14     	; 0x64e <__fixunssfsi+0x46>
 640:	b9 3f       	cpi	r27, 0xF9	; 249
 642:	cc f3       	brlt	.-14     	; 0x636 <__fixunssfsi+0x2e>
 644:	86 95       	lsr	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b3 95       	inc	r27
 64c:	d9 f7       	brne	.-10     	; 0x644 <__fixunssfsi+0x3c>
 64e:	3e f4       	brtc	.+14     	; 0x65e <__fixunssfsi+0x56>
 650:	90 95       	com	r25
 652:	80 95       	com	r24
 654:	70 95       	com	r23
 656:	61 95       	neg	r22
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	08 95       	ret

00000660 <__floatunsisf>:
 660:	e8 94       	clt
 662:	09 c0       	rjmp	.+18     	; 0x676 <__floatsisf+0x12>

00000664 <__floatsisf>:
 664:	97 fb       	bst	r25, 7
 666:	3e f4       	brtc	.+14     	; 0x676 <__floatsisf+0x12>
 668:	90 95       	com	r25
 66a:	80 95       	com	r24
 66c:	70 95       	com	r23
 66e:	61 95       	neg	r22
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	99 23       	and	r25, r25
 678:	a9 f0       	breq	.+42     	; 0x6a4 <__floatsisf+0x40>
 67a:	f9 2f       	mov	r31, r25
 67c:	96 e9       	ldi	r25, 0x96	; 150
 67e:	bb 27       	eor	r27, r27
 680:	93 95       	inc	r25
 682:	f6 95       	lsr	r31
 684:	87 95       	ror	r24
 686:	77 95       	ror	r23
 688:	67 95       	ror	r22
 68a:	b7 95       	ror	r27
 68c:	f1 11       	cpse	r31, r1
 68e:	f8 cf       	rjmp	.-16     	; 0x680 <__floatsisf+0x1c>
 690:	fa f4       	brpl	.+62     	; 0x6d0 <__floatsisf+0x6c>
 692:	bb 0f       	add	r27, r27
 694:	11 f4       	brne	.+4      	; 0x69a <__floatsisf+0x36>
 696:	60 ff       	sbrs	r22, 0
 698:	1b c0       	rjmp	.+54     	; 0x6d0 <__floatsisf+0x6c>
 69a:	6f 5f       	subi	r22, 0xFF	; 255
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	8f 4f       	sbci	r24, 0xFF	; 255
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	16 c0       	rjmp	.+44     	; 0x6d0 <__floatsisf+0x6c>
 6a4:	88 23       	and	r24, r24
 6a6:	11 f0       	breq	.+4      	; 0x6ac <__floatsisf+0x48>
 6a8:	96 e9       	ldi	r25, 0x96	; 150
 6aa:	11 c0       	rjmp	.+34     	; 0x6ce <__floatsisf+0x6a>
 6ac:	77 23       	and	r23, r23
 6ae:	21 f0       	breq	.+8      	; 0x6b8 <__floatsisf+0x54>
 6b0:	9e e8       	ldi	r25, 0x8E	; 142
 6b2:	87 2f       	mov	r24, r23
 6b4:	76 2f       	mov	r23, r22
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <__floatsisf+0x5e>
 6b8:	66 23       	and	r22, r22
 6ba:	71 f0       	breq	.+28     	; 0x6d8 <__floatsisf+0x74>
 6bc:	96 e8       	ldi	r25, 0x86	; 134
 6be:	86 2f       	mov	r24, r22
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	2a f0       	brmi	.+10     	; 0x6d0 <__floatsisf+0x6c>
 6c6:	9a 95       	dec	r25
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	da f7       	brpl	.-10     	; 0x6c6 <__floatsisf+0x62>
 6d0:	88 0f       	add	r24, r24
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <floor>:
 6da:	85 d0       	rcall	.+266    	; 0x7e6 <__fp_trunc>
 6dc:	80 f0       	brcs	.+32     	; 0x6fe <floor+0x24>
 6de:	9f 37       	cpi	r25, 0x7F	; 127
 6e0:	40 f4       	brcc	.+16     	; 0x6f2 <floor+0x18>
 6e2:	91 11       	cpse	r25, r1
 6e4:	0e f0       	brts	.+2      	; 0x6e8 <floor+0xe>
 6e6:	97 c0       	rjmp	.+302    	; 0x816 <__fp_szero>
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	80 e8       	ldi	r24, 0x80	; 128
 6ee:	9f eb       	ldi	r25, 0xBF	; 191
 6f0:	08 95       	ret
 6f2:	26 f4       	brtc	.+8      	; 0x6fc <floor+0x22>
 6f4:	1b 16       	cp	r1, r27
 6f6:	61 1d       	adc	r22, r1
 6f8:	71 1d       	adc	r23, r1
 6fa:	81 1d       	adc	r24, r1
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <__fp_mintl>
 6fe:	21 c0       	rjmp	.+66     	; 0x742 <__fp_mpack>

00000700 <__fp_inf>:
 700:	97 f9       	bld	r25, 7
 702:	9f 67       	ori	r25, 0x7F	; 127
 704:	80 e8       	ldi	r24, 0x80	; 128
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	08 95       	ret

0000070c <__fp_mintl>:
 70c:	88 23       	and	r24, r24
 70e:	71 f4       	brne	.+28     	; 0x72c <__fp_mintl+0x20>
 710:	77 23       	and	r23, r23
 712:	21 f0       	breq	.+8      	; 0x71c <__fp_mintl+0x10>
 714:	98 50       	subi	r25, 0x08	; 8
 716:	87 2b       	or	r24, r23
 718:	76 2f       	mov	r23, r22
 71a:	07 c0       	rjmp	.+14     	; 0x72a <__fp_mintl+0x1e>
 71c:	66 23       	and	r22, r22
 71e:	11 f4       	brne	.+4      	; 0x724 <__fp_mintl+0x18>
 720:	99 27       	eor	r25, r25
 722:	0d c0       	rjmp	.+26     	; 0x73e <__fp_mintl+0x32>
 724:	90 51       	subi	r25, 0x10	; 16
 726:	86 2b       	or	r24, r22
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	2a f0       	brmi	.+10     	; 0x738 <__fp_mintl+0x2c>
 72e:	9a 95       	dec	r25
 730:	66 0f       	add	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	da f7       	brpl	.-10     	; 0x72e <__fp_mintl+0x22>
 738:	88 0f       	add	r24, r24
 73a:	96 95       	lsr	r25
 73c:	87 95       	ror	r24
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

00000742 <__fp_mpack>:
 742:	9f 3f       	cpi	r25, 0xFF	; 255
 744:	31 f0       	breq	.+12     	; 0x752 <__fp_mpack_finite+0xc>

00000746 <__fp_mpack_finite>:
 746:	91 50       	subi	r25, 0x01	; 1
 748:	20 f4       	brcc	.+8      	; 0x752 <__fp_mpack_finite+0xc>
 74a:	87 95       	ror	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	88 0f       	add	r24, r24
 754:	91 1d       	adc	r25, r1
 756:	96 95       	lsr	r25
 758:	87 95       	ror	r24
 75a:	97 f9       	bld	r25, 7
 75c:	08 95       	ret

0000075e <__fp_nan>:
 75e:	9f ef       	ldi	r25, 0xFF	; 255
 760:	80 ec       	ldi	r24, 0xC0	; 192
 762:	08 95       	ret

00000764 <__fp_pscA>:
 764:	00 24       	eor	r0, r0
 766:	0a 94       	dec	r0
 768:	16 16       	cp	r1, r22
 76a:	17 06       	cpc	r1, r23
 76c:	18 06       	cpc	r1, r24
 76e:	09 06       	cpc	r0, r25
 770:	08 95       	ret

00000772 <__fp_pscB>:
 772:	00 24       	eor	r0, r0
 774:	0a 94       	dec	r0
 776:	12 16       	cp	r1, r18
 778:	13 06       	cpc	r1, r19
 77a:	14 06       	cpc	r1, r20
 77c:	05 06       	cpc	r0, r21
 77e:	08 95       	ret

00000780 <__fp_round>:
 780:	09 2e       	mov	r0, r25
 782:	03 94       	inc	r0
 784:	00 0c       	add	r0, r0
 786:	11 f4       	brne	.+4      	; 0x78c <__fp_round+0xc>
 788:	88 23       	and	r24, r24
 78a:	52 f0       	brmi	.+20     	; 0x7a0 <__fp_round+0x20>
 78c:	bb 0f       	add	r27, r27
 78e:	40 f4       	brcc	.+16     	; 0x7a0 <__fp_round+0x20>
 790:	bf 2b       	or	r27, r31
 792:	11 f4       	brne	.+4      	; 0x798 <__fp_round+0x18>
 794:	60 ff       	sbrs	r22, 0
 796:	04 c0       	rjmp	.+8      	; 0x7a0 <__fp_round+0x20>
 798:	6f 5f       	subi	r22, 0xFF	; 255
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	8f 4f       	sbci	r24, 0xFF	; 255
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	08 95       	ret

000007a2 <__fp_split3>:
 7a2:	57 fd       	sbrc	r21, 7
 7a4:	90 58       	subi	r25, 0x80	; 128
 7a6:	44 0f       	add	r20, r20
 7a8:	55 1f       	adc	r21, r21
 7aa:	59 f0       	breq	.+22     	; 0x7c2 <__fp_splitA+0x10>
 7ac:	5f 3f       	cpi	r21, 0xFF	; 255
 7ae:	71 f0       	breq	.+28     	; 0x7cc <__fp_splitA+0x1a>
 7b0:	47 95       	ror	r20

000007b2 <__fp_splitA>:
 7b2:	88 0f       	add	r24, r24
 7b4:	97 fb       	bst	r25, 7
 7b6:	99 1f       	adc	r25, r25
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <__fp_splitA+0x20>
 7ba:	9f 3f       	cpi	r25, 0xFF	; 255
 7bc:	79 f0       	breq	.+30     	; 0x7dc <__fp_splitA+0x2a>
 7be:	87 95       	ror	r24
 7c0:	08 95       	ret
 7c2:	12 16       	cp	r1, r18
 7c4:	13 06       	cpc	r1, r19
 7c6:	14 06       	cpc	r1, r20
 7c8:	55 1f       	adc	r21, r21
 7ca:	f2 cf       	rjmp	.-28     	; 0x7b0 <__fp_split3+0xe>
 7cc:	46 95       	lsr	r20
 7ce:	f1 df       	rcall	.-30     	; 0x7b2 <__fp_splitA>
 7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <__fp_splitA+0x30>
 7d2:	16 16       	cp	r1, r22
 7d4:	17 06       	cpc	r1, r23
 7d6:	18 06       	cpc	r1, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	f1 cf       	rjmp	.-30     	; 0x7be <__fp_splitA+0xc>
 7dc:	86 95       	lsr	r24
 7de:	71 05       	cpc	r23, r1
 7e0:	61 05       	cpc	r22, r1
 7e2:	08 94       	sec
 7e4:	08 95       	ret

000007e6 <__fp_trunc>:
 7e6:	e5 df       	rcall	.-54     	; 0x7b2 <__fp_splitA>
 7e8:	a0 f0       	brcs	.+40     	; 0x812 <__fp_trunc+0x2c>
 7ea:	be e7       	ldi	r27, 0x7E	; 126
 7ec:	b9 17       	cp	r27, r25
 7ee:	88 f4       	brcc	.+34     	; 0x812 <__fp_trunc+0x2c>
 7f0:	bb 27       	eor	r27, r27
 7f2:	9f 38       	cpi	r25, 0x8F	; 143
 7f4:	60 f4       	brcc	.+24     	; 0x80e <__fp_trunc+0x28>
 7f6:	16 16       	cp	r1, r22
 7f8:	b1 1d       	adc	r27, r1
 7fa:	67 2f       	mov	r22, r23
 7fc:	78 2f       	mov	r23, r24
 7fe:	88 27       	eor	r24, r24
 800:	98 5f       	subi	r25, 0xF8	; 248
 802:	f7 cf       	rjmp	.-18     	; 0x7f2 <__fp_trunc+0xc>
 804:	86 95       	lsr	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b1 1d       	adc	r27, r1
 80c:	93 95       	inc	r25
 80e:	96 39       	cpi	r25, 0x96	; 150
 810:	c8 f3       	brcs	.-14     	; 0x804 <__fp_trunc+0x1e>
 812:	08 95       	ret

00000814 <__fp_zero>:
 814:	e8 94       	clt

00000816 <__fp_szero>:
 816:	bb 27       	eor	r27, r27
 818:	66 27       	eor	r22, r22
 81a:	77 27       	eor	r23, r23
 81c:	cb 01       	movw	r24, r22
 81e:	97 f9       	bld	r25, 7
 820:	08 95       	ret

00000822 <__gesf2>:
 822:	6e d0       	rcall	.+220    	; 0x900 <__fp_cmp>
 824:	08 f4       	brcc	.+2      	; 0x828 <__gesf2+0x6>
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	08 95       	ret

0000082a <__mulsf3>:
 82a:	0a d0       	rcall	.+20     	; 0x840 <__mulsf3x>
 82c:	a9 cf       	rjmp	.-174    	; 0x780 <__fp_round>
 82e:	9a df       	rcall	.-204    	; 0x764 <__fp_pscA>
 830:	28 f0       	brcs	.+10     	; 0x83c <__mulsf3+0x12>
 832:	9f df       	rcall	.-194    	; 0x772 <__fp_pscB>
 834:	18 f0       	brcs	.+6      	; 0x83c <__mulsf3+0x12>
 836:	95 23       	and	r25, r21
 838:	09 f0       	breq	.+2      	; 0x83c <__mulsf3+0x12>
 83a:	62 cf       	rjmp	.-316    	; 0x700 <__fp_inf>
 83c:	90 cf       	rjmp	.-224    	; 0x75e <__fp_nan>
 83e:	eb cf       	rjmp	.-42     	; 0x816 <__fp_szero>

00000840 <__mulsf3x>:
 840:	b0 df       	rcall	.-160    	; 0x7a2 <__fp_split3>
 842:	a8 f3       	brcs	.-22     	; 0x82e <__mulsf3+0x4>

00000844 <__mulsf3_pse>:
 844:	99 23       	and	r25, r25
 846:	d9 f3       	breq	.-10     	; 0x83e <__mulsf3+0x14>
 848:	55 23       	and	r21, r21
 84a:	c9 f3       	breq	.-14     	; 0x83e <__mulsf3+0x14>
 84c:	95 0f       	add	r25, r21
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	55 1f       	adc	r21, r21
 852:	aa 27       	eor	r26, r26
 854:	ee 27       	eor	r30, r30
 856:	ff 27       	eor	r31, r31
 858:	bb 27       	eor	r27, r27
 85a:	00 24       	eor	r0, r0
 85c:	08 94       	sec
 85e:	67 95       	ror	r22
 860:	20 f4       	brcc	.+8      	; 0x86a <__mulsf3_pse+0x26>
 862:	e2 0f       	add	r30, r18
 864:	f3 1f       	adc	r31, r19
 866:	b4 1f       	adc	r27, r20
 868:	0a 1e       	adc	r0, r26
 86a:	22 0f       	add	r18, r18
 86c:	33 1f       	adc	r19, r19
 86e:	44 1f       	adc	r20, r20
 870:	aa 1f       	adc	r26, r26
 872:	66 95       	lsr	r22
 874:	a9 f7       	brne	.-22     	; 0x860 <__mulsf3_pse+0x1c>
 876:	77 95       	ror	r23
 878:	30 f4       	brcc	.+12     	; 0x886 <__mulsf3_pse+0x42>
 87a:	f3 0f       	add	r31, r19
 87c:	b4 1f       	adc	r27, r20
 87e:	0a 1e       	adc	r0, r26
 880:	12 1e       	adc	r1, r18
 882:	08 f4       	brcc	.+2      	; 0x886 <__mulsf3_pse+0x42>
 884:	63 95       	inc	r22
 886:	33 0f       	add	r19, r19
 888:	44 1f       	adc	r20, r20
 88a:	aa 1f       	adc	r26, r26
 88c:	22 1f       	adc	r18, r18
 88e:	76 95       	lsr	r23
 890:	99 f7       	brne	.-26     	; 0x878 <__mulsf3_pse+0x34>
 892:	87 95       	ror	r24
 894:	20 f4       	brcc	.+8      	; 0x89e <__mulsf3_pse+0x5a>
 896:	b4 0f       	add	r27, r20
 898:	0a 1e       	adc	r0, r26
 89a:	12 1e       	adc	r1, r18
 89c:	63 1f       	adc	r22, r19
 89e:	44 0f       	add	r20, r20
 8a0:	aa 1f       	adc	r26, r26
 8a2:	22 1f       	adc	r18, r18
 8a4:	33 1f       	adc	r19, r19
 8a6:	86 95       	lsr	r24
 8a8:	a9 f7       	brne	.-22     	; 0x894 <__mulsf3_pse+0x50>
 8aa:	86 2f       	mov	r24, r22
 8ac:	71 2d       	mov	r23, r1
 8ae:	60 2d       	mov	r22, r0
 8b0:	11 24       	eor	r1, r1
 8b2:	9f 57       	subi	r25, 0x7F	; 127
 8b4:	50 40       	sbci	r21, 0x00	; 0
 8b6:	8a f0       	brmi	.+34     	; 0x8da <__mulsf3_pse+0x96>
 8b8:	e1 f0       	breq	.+56     	; 0x8f2 <__mulsf3_pse+0xae>
 8ba:	88 23       	and	r24, r24
 8bc:	4a f0       	brmi	.+18     	; 0x8d0 <__mulsf3_pse+0x8c>
 8be:	ee 0f       	add	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	bb 1f       	adc	r27, r27
 8c4:	66 1f       	adc	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	50 40       	sbci	r21, 0x00	; 0
 8ce:	a9 f7       	brne	.-22     	; 0x8ba <__mulsf3_pse+0x76>
 8d0:	9e 3f       	cpi	r25, 0xFE	; 254
 8d2:	51 05       	cpc	r21, r1
 8d4:	70 f0       	brcs	.+28     	; 0x8f2 <__mulsf3_pse+0xae>
 8d6:	14 cf       	rjmp	.-472    	; 0x700 <__fp_inf>
 8d8:	9e cf       	rjmp	.-196    	; 0x816 <__fp_szero>
 8da:	5f 3f       	cpi	r21, 0xFF	; 255
 8dc:	ec f3       	brlt	.-6      	; 0x8d8 <__mulsf3_pse+0x94>
 8de:	98 3e       	cpi	r25, 0xE8	; 232
 8e0:	dc f3       	brlt	.-10     	; 0x8d8 <__mulsf3_pse+0x94>
 8e2:	86 95       	lsr	r24
 8e4:	77 95       	ror	r23
 8e6:	67 95       	ror	r22
 8e8:	b7 95       	ror	r27
 8ea:	f7 95       	ror	r31
 8ec:	e7 95       	ror	r30
 8ee:	9f 5f       	subi	r25, 0xFF	; 255
 8f0:	c1 f7       	brne	.-16     	; 0x8e2 <__mulsf3_pse+0x9e>
 8f2:	fe 2b       	or	r31, r30
 8f4:	88 0f       	add	r24, r24
 8f6:	91 1d       	adc	r25, r1
 8f8:	96 95       	lsr	r25
 8fa:	87 95       	ror	r24
 8fc:	97 f9       	bld	r25, 7
 8fe:	08 95       	ret

00000900 <__fp_cmp>:
 900:	99 0f       	add	r25, r25
 902:	00 08       	sbc	r0, r0
 904:	55 0f       	add	r21, r21
 906:	aa 0b       	sbc	r26, r26
 908:	e0 e8       	ldi	r30, 0x80	; 128
 90a:	fe ef       	ldi	r31, 0xFE	; 254
 90c:	16 16       	cp	r1, r22
 90e:	17 06       	cpc	r1, r23
 910:	e8 07       	cpc	r30, r24
 912:	f9 07       	cpc	r31, r25
 914:	c0 f0       	brcs	.+48     	; 0x946 <__fp_cmp+0x46>
 916:	12 16       	cp	r1, r18
 918:	13 06       	cpc	r1, r19
 91a:	e4 07       	cpc	r30, r20
 91c:	f5 07       	cpc	r31, r21
 91e:	98 f0       	brcs	.+38     	; 0x946 <__fp_cmp+0x46>
 920:	62 1b       	sub	r22, r18
 922:	73 0b       	sbc	r23, r19
 924:	84 0b       	sbc	r24, r20
 926:	95 0b       	sbc	r25, r21
 928:	39 f4       	brne	.+14     	; 0x938 <__fp_cmp+0x38>
 92a:	0a 26       	eor	r0, r26
 92c:	61 f0       	breq	.+24     	; 0x946 <__fp_cmp+0x46>
 92e:	23 2b       	or	r18, r19
 930:	24 2b       	or	r18, r20
 932:	25 2b       	or	r18, r21
 934:	21 f4       	brne	.+8      	; 0x93e <__fp_cmp+0x3e>
 936:	08 95       	ret
 938:	0a 26       	eor	r0, r26
 93a:	09 f4       	brne	.+2      	; 0x93e <__fp_cmp+0x3e>
 93c:	a1 40       	sbci	r26, 0x01	; 1
 93e:	a6 95       	lsr	r26
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	81 1d       	adc	r24, r1
 944:	81 1d       	adc	r24, r1
 946:	08 95       	ret

00000948 <__mulhi3>:
 948:	00 24       	eor	r0, r0
 94a:	55 27       	eor	r21, r21
 94c:	04 c0       	rjmp	.+8      	; 0x956 <__mulhi3+0xe>
 94e:	08 0e       	add	r0, r24
 950:	59 1f       	adc	r21, r25
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	00 97       	sbiw	r24, 0x00	; 0
 958:	29 f0       	breq	.+10     	; 0x964 <__mulhi3+0x1c>
 95a:	76 95       	lsr	r23
 95c:	67 95       	ror	r22
 95e:	b8 f3       	brcs	.-18     	; 0x94e <__mulhi3+0x6>
 960:	71 05       	cpc	r23, r1
 962:	b9 f7       	brne	.-18     	; 0x952 <__mulhi3+0xa>
 964:	80 2d       	mov	r24, r0
 966:	95 2f       	mov	r25, r21
 968:	08 95       	ret

0000096a <__udivmodsi4>:
 96a:	a1 e2       	ldi	r26, 0x21	; 33
 96c:	1a 2e       	mov	r1, r26
 96e:	aa 1b       	sub	r26, r26
 970:	bb 1b       	sub	r27, r27
 972:	fd 01       	movw	r30, r26
 974:	0d c0       	rjmp	.+26     	; 0x990 <__udivmodsi4_ep>

00000976 <__udivmodsi4_loop>:
 976:	aa 1f       	adc	r26, r26
 978:	bb 1f       	adc	r27, r27
 97a:	ee 1f       	adc	r30, r30
 97c:	ff 1f       	adc	r31, r31
 97e:	a2 17       	cp	r26, r18
 980:	b3 07       	cpc	r27, r19
 982:	e4 07       	cpc	r30, r20
 984:	f5 07       	cpc	r31, r21
 986:	20 f0       	brcs	.+8      	; 0x990 <__udivmodsi4_ep>
 988:	a2 1b       	sub	r26, r18
 98a:	b3 0b       	sbc	r27, r19
 98c:	e4 0b       	sbc	r30, r20
 98e:	f5 0b       	sbc	r31, r21

00000990 <__udivmodsi4_ep>:
 990:	66 1f       	adc	r22, r22
 992:	77 1f       	adc	r23, r23
 994:	88 1f       	adc	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	1a 94       	dec	r1
 99a:	69 f7       	brne	.-38     	; 0x976 <__udivmodsi4_loop>
 99c:	60 95       	com	r22
 99e:	70 95       	com	r23
 9a0:	80 95       	com	r24
 9a2:	90 95       	com	r25
 9a4:	9b 01       	movw	r18, r22
 9a6:	ac 01       	movw	r20, r24
 9a8:	bd 01       	movw	r22, r26
 9aa:	cf 01       	movw	r24, r30
 9ac:	08 95       	ret

000009ae <malloc>:
 9ae:	0f 93       	push	r16
 9b0:	1f 93       	push	r17
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	82 30       	cpi	r24, 0x02	; 2
 9b8:	91 05       	cpc	r25, r1
 9ba:	10 f4       	brcc	.+4      	; 0x9c0 <malloc+0x12>
 9bc:	82 e0       	ldi	r24, 0x02	; 2
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__flp>
 9c4:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__flp+0x1>
 9c8:	20 e0       	ldi	r18, 0x00	; 0
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	a0 e0       	ldi	r26, 0x00	; 0
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	30 97       	sbiw	r30, 0x00	; 0
 9d2:	19 f1       	breq	.+70     	; 0xa1a <malloc+0x6c>
 9d4:	40 81       	ld	r20, Z
 9d6:	51 81       	ldd	r21, Z+1	; 0x01
 9d8:	02 81       	ldd	r16, Z+2	; 0x02
 9da:	13 81       	ldd	r17, Z+3	; 0x03
 9dc:	48 17       	cp	r20, r24
 9de:	59 07       	cpc	r21, r25
 9e0:	c8 f0       	brcs	.+50     	; 0xa14 <malloc+0x66>
 9e2:	84 17       	cp	r24, r20
 9e4:	95 07       	cpc	r25, r21
 9e6:	69 f4       	brne	.+26     	; 0xa02 <malloc+0x54>
 9e8:	10 97       	sbiw	r26, 0x00	; 0
 9ea:	31 f0       	breq	.+12     	; 0x9f8 <malloc+0x4a>
 9ec:	12 96       	adiw	r26, 0x02	; 2
 9ee:	0c 93       	st	X, r16
 9f0:	12 97       	sbiw	r26, 0x02	; 2
 9f2:	13 96       	adiw	r26, 0x03	; 3
 9f4:	1c 93       	st	X, r17
 9f6:	27 c0       	rjmp	.+78     	; 0xa46 <malloc+0x98>
 9f8:	00 93 76 01 	sts	0x0176, r16	; 0x800176 <__flp>
 9fc:	10 93 77 01 	sts	0x0177, r17	; 0x800177 <__flp+0x1>
 a00:	22 c0       	rjmp	.+68     	; 0xa46 <malloc+0x98>
 a02:	21 15       	cp	r18, r1
 a04:	31 05       	cpc	r19, r1
 a06:	19 f0       	breq	.+6      	; 0xa0e <malloc+0x60>
 a08:	42 17       	cp	r20, r18
 a0a:	53 07       	cpc	r21, r19
 a0c:	18 f4       	brcc	.+6      	; 0xa14 <malloc+0x66>
 a0e:	9a 01       	movw	r18, r20
 a10:	bd 01       	movw	r22, r26
 a12:	ef 01       	movw	r28, r30
 a14:	df 01       	movw	r26, r30
 a16:	f8 01       	movw	r30, r16
 a18:	db cf       	rjmp	.-74     	; 0x9d0 <malloc+0x22>
 a1a:	21 15       	cp	r18, r1
 a1c:	31 05       	cpc	r19, r1
 a1e:	f9 f0       	breq	.+62     	; 0xa5e <malloc+0xb0>
 a20:	28 1b       	sub	r18, r24
 a22:	39 0b       	sbc	r19, r25
 a24:	24 30       	cpi	r18, 0x04	; 4
 a26:	31 05       	cpc	r19, r1
 a28:	80 f4       	brcc	.+32     	; 0xa4a <malloc+0x9c>
 a2a:	8a 81       	ldd	r24, Y+2	; 0x02
 a2c:	9b 81       	ldd	r25, Y+3	; 0x03
 a2e:	61 15       	cp	r22, r1
 a30:	71 05       	cpc	r23, r1
 a32:	21 f0       	breq	.+8      	; 0xa3c <malloc+0x8e>
 a34:	fb 01       	movw	r30, r22
 a36:	93 83       	std	Z+3, r25	; 0x03
 a38:	82 83       	std	Z+2, r24	; 0x02
 a3a:	04 c0       	rjmp	.+8      	; 0xa44 <malloc+0x96>
 a3c:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__flp+0x1>
 a40:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__flp>
 a44:	fe 01       	movw	r30, r28
 a46:	32 96       	adiw	r30, 0x02	; 2
 a48:	44 c0       	rjmp	.+136    	; 0xad2 <malloc+0x124>
 a4a:	fe 01       	movw	r30, r28
 a4c:	e2 0f       	add	r30, r18
 a4e:	f3 1f       	adc	r31, r19
 a50:	81 93       	st	Z+, r24
 a52:	91 93       	st	Z+, r25
 a54:	22 50       	subi	r18, 0x02	; 2
 a56:	31 09       	sbc	r19, r1
 a58:	39 83       	std	Y+1, r19	; 0x01
 a5a:	28 83       	st	Y, r18
 a5c:	3a c0       	rjmp	.+116    	; 0xad2 <malloc+0x124>
 a5e:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__data_end>
 a62:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__data_end+0x1>
 a66:	23 2b       	or	r18, r19
 a68:	41 f4       	brne	.+16     	; 0xa7a <malloc+0xcc>
 a6a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 a6e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 a72:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <__data_end+0x1>
 a76:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <__data_end>
 a7a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 a7e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 a82:	21 15       	cp	r18, r1
 a84:	31 05       	cpc	r19, r1
 a86:	41 f4       	brne	.+16     	; 0xa98 <malloc+0xea>
 a88:	2d b7       	in	r18, 0x3d	; 61
 a8a:	3e b7       	in	r19, 0x3e	; 62
 a8c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 a90:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 a94:	24 1b       	sub	r18, r20
 a96:	35 0b       	sbc	r19, r21
 a98:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <__data_end>
 a9c:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <__data_end+0x1>
 aa0:	e2 17       	cp	r30, r18
 aa2:	f3 07       	cpc	r31, r19
 aa4:	a0 f4       	brcc	.+40     	; 0xace <malloc+0x120>
 aa6:	2e 1b       	sub	r18, r30
 aa8:	3f 0b       	sbc	r19, r31
 aaa:	28 17       	cp	r18, r24
 aac:	39 07       	cpc	r19, r25
 aae:	78 f0       	brcs	.+30     	; 0xace <malloc+0x120>
 ab0:	ac 01       	movw	r20, r24
 ab2:	4e 5f       	subi	r20, 0xFE	; 254
 ab4:	5f 4f       	sbci	r21, 0xFF	; 255
 ab6:	24 17       	cp	r18, r20
 ab8:	35 07       	cpc	r19, r21
 aba:	48 f0       	brcs	.+18     	; 0xace <malloc+0x120>
 abc:	4e 0f       	add	r20, r30
 abe:	5f 1f       	adc	r21, r31
 ac0:	50 93 75 01 	sts	0x0175, r21	; 0x800175 <__data_end+0x1>
 ac4:	40 93 74 01 	sts	0x0174, r20	; 0x800174 <__data_end>
 ac8:	81 93       	st	Z+, r24
 aca:	91 93       	st	Z+, r25
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <malloc+0x124>
 ace:	e0 e0       	ldi	r30, 0x00	; 0
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	cf 01       	movw	r24, r30
 ad4:	df 91       	pop	r29
 ad6:	cf 91       	pop	r28
 ad8:	1f 91       	pop	r17
 ada:	0f 91       	pop	r16
 adc:	08 95       	ret

00000ade <free>:
 ade:	cf 93       	push	r28
 ae0:	df 93       	push	r29
 ae2:	00 97       	sbiw	r24, 0x00	; 0
 ae4:	09 f4       	brne	.+2      	; 0xae8 <free+0xa>
 ae6:	81 c0       	rjmp	.+258    	; 0xbea <free+0x10c>
 ae8:	fc 01       	movw	r30, r24
 aea:	32 97       	sbiw	r30, 0x02	; 2
 aec:	13 82       	std	Z+3, r1	; 0x03
 aee:	12 82       	std	Z+2, r1	; 0x02
 af0:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <__flp>
 af4:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <__flp+0x1>
 af8:	10 97       	sbiw	r26, 0x00	; 0
 afa:	81 f4       	brne	.+32     	; 0xb1c <free+0x3e>
 afc:	20 81       	ld	r18, Z
 afe:	31 81       	ldd	r19, Z+1	; 0x01
 b00:	82 0f       	add	r24, r18
 b02:	93 1f       	adc	r25, r19
 b04:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__data_end>
 b08:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__data_end+0x1>
 b0c:	28 17       	cp	r18, r24
 b0e:	39 07       	cpc	r19, r25
 b10:	51 f5       	brne	.+84     	; 0xb66 <free+0x88>
 b12:	f0 93 75 01 	sts	0x0175, r31	; 0x800175 <__data_end+0x1>
 b16:	e0 93 74 01 	sts	0x0174, r30	; 0x800174 <__data_end>
 b1a:	67 c0       	rjmp	.+206    	; 0xbea <free+0x10c>
 b1c:	ed 01       	movw	r28, r26
 b1e:	20 e0       	ldi	r18, 0x00	; 0
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	ce 17       	cp	r28, r30
 b24:	df 07       	cpc	r29, r31
 b26:	40 f4       	brcc	.+16     	; 0xb38 <free+0x5a>
 b28:	4a 81       	ldd	r20, Y+2	; 0x02
 b2a:	5b 81       	ldd	r21, Y+3	; 0x03
 b2c:	9e 01       	movw	r18, r28
 b2e:	41 15       	cp	r20, r1
 b30:	51 05       	cpc	r21, r1
 b32:	f1 f0       	breq	.+60     	; 0xb70 <free+0x92>
 b34:	ea 01       	movw	r28, r20
 b36:	f5 cf       	rjmp	.-22     	; 0xb22 <free+0x44>
 b38:	d3 83       	std	Z+3, r29	; 0x03
 b3a:	c2 83       	std	Z+2, r28	; 0x02
 b3c:	40 81       	ld	r20, Z
 b3e:	51 81       	ldd	r21, Z+1	; 0x01
 b40:	84 0f       	add	r24, r20
 b42:	95 1f       	adc	r25, r21
 b44:	c8 17       	cp	r28, r24
 b46:	d9 07       	cpc	r29, r25
 b48:	59 f4       	brne	.+22     	; 0xb60 <free+0x82>
 b4a:	88 81       	ld	r24, Y
 b4c:	99 81       	ldd	r25, Y+1	; 0x01
 b4e:	84 0f       	add	r24, r20
 b50:	95 1f       	adc	r25, r21
 b52:	02 96       	adiw	r24, 0x02	; 2
 b54:	91 83       	std	Z+1, r25	; 0x01
 b56:	80 83       	st	Z, r24
 b58:	8a 81       	ldd	r24, Y+2	; 0x02
 b5a:	9b 81       	ldd	r25, Y+3	; 0x03
 b5c:	93 83       	std	Z+3, r25	; 0x03
 b5e:	82 83       	std	Z+2, r24	; 0x02
 b60:	21 15       	cp	r18, r1
 b62:	31 05       	cpc	r19, r1
 b64:	29 f4       	brne	.+10     	; 0xb70 <free+0x92>
 b66:	f0 93 77 01 	sts	0x0177, r31	; 0x800177 <__flp+0x1>
 b6a:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <__flp>
 b6e:	3d c0       	rjmp	.+122    	; 0xbea <free+0x10c>
 b70:	e9 01       	movw	r28, r18
 b72:	fb 83       	std	Y+3, r31	; 0x03
 b74:	ea 83       	std	Y+2, r30	; 0x02
 b76:	49 91       	ld	r20, Y+
 b78:	59 91       	ld	r21, Y+
 b7a:	c4 0f       	add	r28, r20
 b7c:	d5 1f       	adc	r29, r21
 b7e:	ec 17       	cp	r30, r28
 b80:	fd 07       	cpc	r31, r29
 b82:	61 f4       	brne	.+24     	; 0xb9c <free+0xbe>
 b84:	80 81       	ld	r24, Z
 b86:	91 81       	ldd	r25, Z+1	; 0x01
 b88:	84 0f       	add	r24, r20
 b8a:	95 1f       	adc	r25, r21
 b8c:	02 96       	adiw	r24, 0x02	; 2
 b8e:	e9 01       	movw	r28, r18
 b90:	99 83       	std	Y+1, r25	; 0x01
 b92:	88 83       	st	Y, r24
 b94:	82 81       	ldd	r24, Z+2	; 0x02
 b96:	93 81       	ldd	r25, Z+3	; 0x03
 b98:	9b 83       	std	Y+3, r25	; 0x03
 b9a:	8a 83       	std	Y+2, r24	; 0x02
 b9c:	e0 e0       	ldi	r30, 0x00	; 0
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	12 96       	adiw	r26, 0x02	; 2
 ba2:	8d 91       	ld	r24, X+
 ba4:	9c 91       	ld	r25, X
 ba6:	13 97       	sbiw	r26, 0x03	; 3
 ba8:	00 97       	sbiw	r24, 0x00	; 0
 baa:	19 f0       	breq	.+6      	; 0xbb2 <free+0xd4>
 bac:	fd 01       	movw	r30, r26
 bae:	dc 01       	movw	r26, r24
 bb0:	f7 cf       	rjmp	.-18     	; 0xba0 <free+0xc2>
 bb2:	8d 91       	ld	r24, X+
 bb4:	9c 91       	ld	r25, X
 bb6:	11 97       	sbiw	r26, 0x01	; 1
 bb8:	9d 01       	movw	r18, r26
 bba:	2e 5f       	subi	r18, 0xFE	; 254
 bbc:	3f 4f       	sbci	r19, 0xFF	; 255
 bbe:	82 0f       	add	r24, r18
 bc0:	93 1f       	adc	r25, r19
 bc2:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__data_end>
 bc6:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__data_end+0x1>
 bca:	28 17       	cp	r18, r24
 bcc:	39 07       	cpc	r19, r25
 bce:	69 f4       	brne	.+26     	; 0xbea <free+0x10c>
 bd0:	30 97       	sbiw	r30, 0x00	; 0
 bd2:	29 f4       	brne	.+10     	; 0xbde <free+0x100>
 bd4:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__flp+0x1>
 bd8:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__flp>
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <free+0x104>
 bde:	13 82       	std	Z+3, r1	; 0x03
 be0:	12 82       	std	Z+2, r1	; 0x02
 be2:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <__data_end+0x1>
 be6:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <__data_end>
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	08 95       	ret

00000bf0 <_exit>:
 bf0:	f8 94       	cli

00000bf2 <__stop_program>:
 bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <__stop_program>
